page.includeCSS.dfcontentslide = {$plugin.tx_df_contentslide.css}
page.includeJS.dfcontentslide = {$plugin.tx_df_contentslide.js}

# link generation object for later usage
// @var temp.dfcontentslide_typolink typolink
temp.dfcontentslide_typolink {
	parameter = #acc{field:uid}
	parameter.insertData = 1
	addQueryString = 1

	ATagParams = id="acc{field:uid}"
	ATagParams.insertData = 1

	useCacheHash = 1
	additionalParams = &df_contentslide_noajax=1
	additionalParams.if {
		value = 1,3
		isInList.field = tx_df_contentslide_options
	}
}

# prepare the header
lib.stdheader {
	stdWrap {
		# inject wrapping class for the trigger
		innerWrap.cObject = COA
		innerWrap.cObject {

			10 = TEXT
			10 {
				fieldRequired = tx_df_contentslide_contentslide
				value = <div class="dfcontentslide-toggle">|</div>
				insertData = 1
			}

		}
	}

	# inject the link for an expandable element
	10.setCurrent.outerWrap.cObject = TEXT
	10.setCurrent.outerWrap.cObject {
		value = |
		fieldRequired = tx_df_contentslide_contentslide
		typolink < temp.dfcontentslide_typolink
	}

	# replace header with default text if the header is empty
	stdWrap.fieldRequired = header
	stdWrap.fieldRequired.override = uid
	stdWrap.fieldRequired.override.if {
		isTrue.field = tx_df_contentslide_contentslide
	}

	10.setCurrent.field >
	10.setCurrent.cObject = COA
	10.setCurrent.cObject {
		10 = TEXT
		10 {
			field = header

			// @TODO header must be visible as content in this case!
			// not implemented yet, because of it's complexity (maybe something for TYPO3 7)
			#override.field = tx_df_contentslide_header
		}

		stdWrap.ifBlank.cObject = TEXT
		stdWrap.ifBlank.cObject {
			value = {$plugin.tx_df_contentslide.emptyHeaderText}
			fieldRequired = tx_df_contentslide_contentslide
		}
	}
}

# integration of df_contentslide into the content
# only render this if content is rendered at all (not easily possible with the current system)
tt_content.stdWrap {
	# remove div tag around empty content elements
	required = 1
	required.fieldRequired = tx_df_contentslide_contentslide

	innerWrap.cObject.default {
		# add animation data information
		10 {
			stdWrap.noTrimWrap.cObject = TEXT
			stdWrap.noTrimWrap.cObject {
				fieldRequired = tx_df_contentslide_contentslide
				value = || data-dfcontentslide-animation="{field:tx_df_contentslide_animation}"|
				insertData = 1
			}
		}

		15 = LOAD_REGISTER
		15 {
			isActive.cObject = TEXT
			isActive.cObject {
				value = dfcontentslide-open
				if {
					value = 2,3
					isInList.field = tx_df_contentslide_options
				}
			}
		}

		# add general wrapper classes for expandable content elements
		20 {
			902347 = TEXT
			902347 {
				fieldRequired = tx_df_contentslide_contentslide
				noTrimWrap = || dfcontentslide-wrap {register:isActive} dfcontentslide-{field:tx_df_contentslide_layout}|
				noTrimWrap.insertData = 1
			}
		}

		25 = RESTORE_REGISTER
	}
}

// @var temp.dfcontentslide_contentIntegration stdWrap
temp.dfcontentslide_contentIntegration {
	# inner wrap for df_contentslide (always rendered)
	outerWrap = <div class="dfcontentslide-content"><div class="dfcontentslide-contentSub">|</div></div>
	outerWrap.fieldRequired = tx_df_contentslide_contentslide

	# render the content only if not in AJAX mode
	if {
		isTrue.field = tx_df_contentslide_contentslide
		isInList.field = tx_df_contentslide_options
		value = 1,3
		negate = 1
	}
}

# implementation into the CTYPES
tt_content.text.20.stdWrap < temp.dfcontentslide_contentIntegration
tt_content.image.20.stdWrap < temp.dfcontentslide_contentIntegration
tt_content.gridelements_pi1.20.stdWrap < temp.dfcontentslide_contentIntegration

# textpic is built with the image and text types. So we need to handle it a little bit more specific.
tt_content.textpic.20.stdWrap < temp.dfcontentslide_contentIntegration
tt_content.textpic.20.text.20.stdWrap >
<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:php="http://www.php.net/"
targetNamespace="http://typo3.org/ns/FluidTYPO3/Vhs/ViewHelpers">
<xsd:element name="asset">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Basic Asset ViewHelper

Places the contents of the asset (the tag body) directly
in the additional header content of the page. This most
basic possible version of an Asset has only the core
features shared by every Asset type:

- a "name" attribute which is required, identifying the Asset
  by a lowerCamelCase or lowercase_underscored value, your
  preference (but lowerCamelCase recommended for consistency).
- a "dependencies" attribute with a CSV list of other named
  Assets upon which the current Asset depends. When used, this
  Asset will be included after every asset listed as dependency.
- a "group" attribute which is optional and is used ty further
  identify the Asset as belonging to a particular group which
  can be suppressed or manipulated through TypoScript. For
  example, the default value is "fluid" and if TypoScript is
  used to exclude the group "fluid" then any Asset in that
  group will simply not be loaded.
- an "overwrite" attribute which if enabled causes any existing
  asset with the same name to be overwritten with the current
  Asset instead. If rendered in a loop only the last instance
  is actually used (this allows Assets in Partials which are
  rendered in an f:for loop).
- a "debug" property which enables output of the information
  used by the current Asset, with an option to force debug
  mode through TypoScript.
- additional properties which affect how the Asset is processed.
  For a full list see the argument descriptions; the same
  settings can be applied through TypoScript per-Asset, globally
  or per-Asset-group.

> Note: there are no static TypoScript templates for VHS but
> you will find a complete list in the README.md file in the
> root of the extension folder.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="asset">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Basic Asset ViewHelper

Places the contents of the asset (the tag body) directly
in the additional header content of the page. This most
basic possible version of an Asset has only the core
features shared by every Asset type:

- a "name" attribute which is required, identifying the Asset
  by a lowerCamelCase or lowercase_underscored value, your
  preference (but lowerCamelCase recommended for consistency).
- a "dependencies" attribute with a CSV list of other named
  Assets upon which the current Asset depends. When used, this
  Asset will be included after every asset listed as dependency.
- a "group" attribute which is optional and is used ty further
  identify the Asset as belonging to a particular group which
  can be suppressed or manipulated through TypoScript. For
  example, the default value is "fluid" and if TypoScript is
  used to exclude the group "fluid" then any Asset in that
  group will simply not be loaded.
- an "overwrite" attribute which if enabled causes any existing
  asset with the same name to be overwritten with the current
  Asset instead. If rendered in a loop only the last instance
  is actually used (this allows Assets in Partials which are
  rendered in an f:for loop).
- a "debug" property which enables output of the information
  used by the current Asset, with an option to force debug
  mode through TypoScript.
- additional properties which affect how the Asset is processed.
  For a full list see the argument descriptions; the same
  settings can be applied through TypoScript per-Asset, globally
  or per-Asset-group.

> Note: there are no static TypoScript templates for VHS but
> you will find a complete list in the README.md file in the
> root of the extension folder.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="asset.prefetch">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Asset DNS Prefetching ViewHelper

Enables the special `<link rel="dns-prefetch" />` tag
which instructs the browser to start prefetching DNS
records for every domain listed in the `domains` attribute
of this ViewHelper. Prefetching starts as soon as the browser
becomes aware of the tag - to optimise even further, you may
wish to control the output buffer's size to deliver your site
HTML in chunks, the first chunk being the one containing this
ViewHelper.

Note that the web server daemon may send headers which prevent
this prefetching and that these headers can be added in many
ways. If prefetching does not work, you will need to inspect
the HTTP headers returned from the actual environment. Or you
may prefer to simply add `force="TRUE"` to this tag - but
beware that this will affect the entire document's behaviour,
not just for this particular set of domain prefetches. Once
force-enabled this setting cannot be disabled (unless done so
by manually adding an additional meta header tag as examplified
by the `build()` method.

### Example usage:

    <v:asset.prefetch domains="fedext.net,ajax.google.com" />

See: https://developer.mozilla.org/en-US/docs/Controlling_DNS_prefetching]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="domains" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Domain DNS names to prefetch. By default will add all sys_domain record DNS names]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="protocol" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional value of protocol as inserted in the resulting HREF value. If you experience problems with a non-protocol link, try enforcing http/https here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="protocolSeparator"
default="'//'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If you do not enforce a particular protocol and wish to remove the double slashes from the hostname (your browser may not understand this!), set this attribute to an empty value (not-zero)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="force" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, adds an additional meta header tag which forces prefetching to be enabled even if otherwise requested by the http daemon]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="asset.prefetch">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Asset DNS Prefetching ViewHelper

Enables the special `<link rel="dns-prefetch" />` tag
which instructs the browser to start prefetching DNS
records for every domain listed in the `domains` attribute
of this ViewHelper. Prefetching starts as soon as the browser
becomes aware of the tag - to optimise even further, you may
wish to control the output buffer's size to deliver your site
HTML in chunks, the first chunk being the one containing this
ViewHelper.

Note that the web server daemon may send headers which prevent
this prefetching and that these headers can be added in many
ways. If prefetching does not work, you will need to inspect
the HTTP headers returned from the actual environment. Or you
may prefer to simply add `force="TRUE"` to this tag - but
beware that this will affect the entire document's behaviour,
not just for this particular set of domain prefetches. Once
force-enabled this setting cannot be disabled (unless done so
by manually adding an additional meta header tag as examplified
by the `build()` method.

### Example usage:

    <v:asset.prefetch domains="fedext.net,ajax.google.com" />

See: https://developer.mozilla.org/en-US/docs/Controlling_DNS_prefetching]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="domains" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Domain DNS names to prefetch. By default will add all sys_domain record DNS names]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="protocol" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional value of protocol as inserted in the resulting HREF value. If you experience problems with a non-protocol link, try enforcing http/https here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="protocolSeparator"
default="'//'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If you do not enforce a particular protocol and wish to remove the double slashes from the hostname (your browser may not understand this!), set this attribute to an empty value (not-zero)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="force" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, adds an additional meta header tag which forces prefetching to be enabled even if otherwise requested by the http daemon]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="asset.script">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Basic Script ViewHelper

Allows inserting a `<script>` Asset. Settings specify
where to insert the Asset and how to treat it.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="asset.script">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Basic Script ViewHelper

Allows inserting a `<script>` Asset. Settings specify
where to insert the Asset and how to treat it.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="asset.style">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Basic Style ViewHelper

Allows inserting a `<link>` or `<style>` Asset. Settings
specify where to insert the Asset and how to treat it.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="asset.style">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Basic Style ViewHelper

Allows inserting a `<link>` or `<style>` Asset. Settings
specify where to insert the Asset and how to treat it.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="call">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Call ViewHelper

Calls a method on an existing object. Usable as inline or tag.

### Examples

    <!-- inline, useful as argument, for example in f:for -->
    {object -> v:call(method: 'toArray')}
    <!-- tag, useful to quickly output simple values -->
    <v:call object="{object}" method="unconventionalGetter" />
    <v:call method="unconventionalGetter">{object}</v:call>
    <!-- arguments for the method -->
    <v:call object="{object}" method="doSomethingWithArguments" arguments="{0: 'foo', 1: 'bar'}" />]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="method" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="object"
default="NULL" php:type="object">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="arguments"
default="array ( )" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="case">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Case for SwitchViewHelper

Used inside `v:switch` to trigger on specific values.

### Example

    <v:switch value="{variable}">
        <v:case case="someValue" break="TRUE">
            <!-- do whatever, if {variable} == 'someValue' -->
        </v:case>
        <v:case case="default">
            <!-- the case "default" is a reserved keyword which acts as the default case. -->
        </v:case>
    </v:switch>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="case" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value which triggers this case - reserved name "default" used for default case]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="break" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, breaks switch on encountering this case]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isBackend">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Is context Backend?

A condition ViewHelper which renders the `then` child if
current context being rendered is BE.

### Examples

    <!-- simple usage, content becomes then-child -->
    <v:condition.context.isBackend>
        Hooray for BE contexts!
    </v:condition.context.isBackend>
    <!-- extended use combined with f:then and f:else -->
    <v:condition.context.isBackend>
        <f:then>
           Hooray for BE contexts!
        </f:then>
        <f:else>
           Maybe FE, maybe CLI.
        </f:else>
    </v:condition.context.isBackend>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isBackend">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Is context Backend?

A condition ViewHelper which renders the `then` child if
current context being rendered is BE.

### Examples

    <!-- simple usage, content becomes then-child -->
    <v:condition.context.isBackend>
        Hooray for BE contexts!
    </v:condition.context.isBackend>
    <!-- extended use combined with f:then and f:else -->
    <v:condition.context.isBackend>
        <f:then>
           Hooray for BE contexts!
        </f:then>
        <f:else>
           Maybe FE, maybe CLI.
        </f:else>
    </v:condition.context.isBackend>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isCli">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Is context CLI?

A condition ViewHelper which renders the `then` child if
current context being rendered is CLI.

### Examples

    <!-- simple usage, content becomes then-child -->
    <v:condition.context.isCli>
        Hooray for CLI contexts!
    </v:condition.context.isCli>
    <!-- extended use combined with f:then and f:else -->
    <v:condition.context.isCli>
        <f:then>
           Hooray for CLI contexts!
        </f:then>
        <f:else>
           Maybe BE, maybe FE.
        </f:else>
    </v:condition.context.isCli>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isCli">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Is context CLI?

A condition ViewHelper which renders the `then` child if
current context being rendered is CLI.

### Examples

    <!-- simple usage, content becomes then-child -->
    <v:condition.context.isCli>
        Hooray for CLI contexts!
    </v:condition.context.isCli>
    <!-- extended use combined with f:then and f:else -->
    <v:condition.context.isCli>
        <f:then>
           Hooray for CLI contexts!
        </f:then>
        <f:else>
           Maybe BE, maybe FE.
        </f:else>
    </v:condition.context.isCli>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isDevelopment">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Context: IsDevelopment

Returns true if current root application context is development otherwise false.
If no application context has been set, then the default context is production.

#### Note about how to set the application context

The context TYPO3 CMS runs in is specified through the environment variable TYPO3_CONTEXT.
It can be set by .htaccess or in the server configuration

See: http://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/Bootstrapping/Index.html#bootstrapping-context]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isDevelopment">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Context: IsDevelopment

Returns true if current root application context is development otherwise false.
If no application context has been set, then the default context is production.

#### Note about how to set the application context

The context TYPO3 CMS runs in is specified through the environment variable TYPO3_CONTEXT.
It can be set by .htaccess or in the server configuration

See: http://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/Bootstrapping/Index.html#bootstrapping-context]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isFrontend">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Is context Frontend?

A condition ViewHelper which renders the `then` child if
current context being rendered is FE.

### Examples

    <!-- simple usage, content becomes then-child -->
    <v:condition.context.isFrontend>
        Hooray for BE contexts!
    </v:condition.context.isFrontend>
    <!-- extended use combined with f:then and f:else -->
    <v:condition.context.isFrontend>
        <f:then>
           Hooray for BE contexts!
        </f:then>
        <f:else>
           Maybe BE, maybe CLI.
        </f:else>
    </v:condition.context.isFrontend>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isFrontend">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Is context Frontend?

A condition ViewHelper which renders the `then` child if
current context being rendered is FE.

### Examples

    <!-- simple usage, content becomes then-child -->
    <v:condition.context.isFrontend>
        Hooray for BE contexts!
    </v:condition.context.isFrontend>
    <!-- extended use combined with f:then and f:else -->
    <v:condition.context.isFrontend>
        <f:then>
           Hooray for BE contexts!
        </f:then>
        <f:else>
           Maybe BE, maybe CLI.
        </f:else>
    </v:condition.context.isFrontend>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isProduction">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Context: IsProduction

Returns true if current root application context is production otherwise false.
If no application context has been set, then this is the default context.

#### Note about how to set the application context

The context TYPO3 CMS runs in is specified through the environment variable TYPO3_CONTEXT.
It can be set by .htaccess or in the server configuration

See: http://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/Bootstrapping/Index.html#bootstrapping-context]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isProduction">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Context: IsProduction

Returns true if current root application context is production otherwise false.
If no application context has been set, then this is the default context.

#### Note about how to set the application context

The context TYPO3 CMS runs in is specified through the environment variable TYPO3_CONTEXT.
It can be set by .htaccess or in the server configuration

See: http://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/Bootstrapping/Index.html#bootstrapping-context]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isTesting">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Context: IsProduction

Returns true if current root application context is testing otherwise false.
If no application context has been set, then the default context is production.

#### Note about how to set the application context

The context TYPO3 CMS runs in is specified through the environment variable TYPO3_CONTEXT.
It can be set by .htaccess or in the server configuration

See: http://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/Bootstrapping/Index.html#bootstrapping-context]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.context.isTesting">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Context: IsProduction

Returns true if current root application context is testing otherwise false.
If no application context has been set, then the default context is production.

#### Note about how to set the application context

The context TYPO3 CMS runs in is specified through the environment variable TYPO3_CONTEXT.
It can be set by .htaccess or in the server configuration

See: http://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/Bootstrapping/Index.html#bootstrapping-context]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.form.hasValidator">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Form: Field Has Validator?

Takes a property (dotted path supported) and renders the
then-child if the property at the given path has any]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The property name, dotted path supported, to determine required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="validatorName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The class name of the Validator that indicates the property is required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="object"
default="NULL"
php:type="TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional object - if not specified, grabs the associated form object]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.form.hasValidator">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Form: Field Has Validator?

Takes a property (dotted path supported) and renders the
then-child if the property at the given path has any]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The property name, dotted path supported, to determine required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="validatorName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The class name of the Validator that indicates the property is required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="object"
default="NULL"
php:type="TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional object - if not specified, grabs the associated form object]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.form.isRequired">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Is Field Required ViewHelper (condition)

Takes a property (dotted path supported) and renders the
then-child if the property at the given path has an]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The property name, dotted path supported, to determine required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="object"
default="NULL"
php:type="TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional object - if not specified, grabs the associated form object]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.form.isRequired">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Is Field Required ViewHelper (condition)

Takes a property (dotted path supported) and renders the
then-child if the property at the given path has an]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The property name, dotted path supported, to determine required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="object"
default="NULL"
php:type="TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional object - if not specified, grabs the associated form object]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.form.isRequired">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Is Field Required ViewHelper (condition)

Takes a property (dotted path supported) and renders the
then-child if the property at the given path has an]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The property name, dotted path supported, to determine required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="object"
default="NULL"
php:type="TYPO3\CMS\Extbase\DomainObject\DomainObjectInterface">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional object - if not specified, grabs the associated form object]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.iterator.contains">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Condition ViewHelper. Renders the then-child if Iterator/array
haystack contains needle value.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Needle to search for in haystack]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="considerKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tell whether to consider keys in the search assuming haystack is an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.iterator.contains">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Condition ViewHelper. Renders the then-child if Iterator/array
haystack contains needle value.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Needle to search for in haystack]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="considerKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tell whether to consider keys in the search assuming haystack is an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.page.hasSubpages">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Page has subpages

A condition ViewHelper which renders the `then` child if
current page or page with provided UID has subpages. By default
disabled subpages are considered non existent which can be overridden
by setting $includeHidden to TRUE. To include pages that are hidden
in menus set $showHiddenInMenu to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeHidden"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.page.hasSubpages">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Page has subpages

A condition ViewHelper which renders the `then` child if
current page or page with provided UID has subpages. By default
disabled subpages are considered non existent which can be overridden
by setting $includeHidden to TRUE. To include pages that are hidden
in menus set $showHiddenInMenu to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeHidden"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.page.isChildPage">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Page is child page

Condition ViewHelper which renders the `then` child if current
page or page with provided UID is a child of some other page in
the page tree. If $respectSiteRoot is set to TRUE root pages are
never considered child pages even if they are.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="respectSiteRoot"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.page.isChildPage">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Page is child page

Condition ViewHelper which renders the `then` child if current
page or page with provided UID is a child of some other page in
the page tree. If $respectSiteRoot is set to TRUE root pages are
never considered child pages even if they are.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="respectSiteRoot"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.page.isLanguage">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Is current language

A condition ViewHelper which renders the `then` child if
current language matches the provided language uid or language
title. When using language titles like 'de' it is required to
provide a default title to distinguish between the standard
and a non existing language.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="language" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="defaultTitle" default="'en'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.page.isLanguage">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Is current language

A condition ViewHelper which renders the `then` child if
current language matches the provided language uid or language
title. When using language titles like 'de' it is required to
provide a default title to distinguish between the standard
and a non existing language.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="language" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="defaultTitle" default="'en'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.string.contains">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: String contains substring

Condition ViewHelper which renders the `then` child if provided
string $haystack contains provided string $needle.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="haystack" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.string.contains">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: String contains substring

Condition ViewHelper which renders the `then` child if provided
string $haystack contains provided string $needle.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="haystack" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.string.isLowercase">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: String is lowercase

Condition ViewHelper which renders the `then` child if provided
string is lowercase. By default only the first letter is tested.
To test the full string set $fullString to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="string" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fullString" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.string.isLowercase">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: String is lowercase

Condition ViewHelper which renders the `then` child if provided
string is lowercase. By default only the first letter is tested.
To test the full string set $fullString to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="string" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fullString" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.string.isNumeric">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is numeric

Condition ViewHelper which renders the `then` child if provided
value is numeric.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.string.isNumeric">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is numeric

Condition ViewHelper which renders the `then` child if provided
value is numeric.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.string.isUppercase">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: String is lowercase

Condition ViewHelper which renders the `then` child if provided
string is uppercase. By default only the first letter is tested.
To test the full string set $fullString to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="string" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fullString" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.string.isUppercase">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: String is lowercase

Condition ViewHelper which renders the `then` child if provided
string is uppercase. By default only the first letter is tested.
To test the full string set $fullString to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="string" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fullString" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.string.preg">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: String matches regular expression

Condition ViewHelper which renders the `then` child if provided
string matches provided regular expression. $matches array containing
the results can be made available by providing a template variable
name with argument $as.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="pattern" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="string" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="global" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.string.preg">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: String matches regular expression

Condition ViewHelper which renders the `then` child if provided
string matches provided regular expression. $matches array containing
the results can be made available by providing a template variable
name with argument $as.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="pattern" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="string" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="global" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isArray">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Type of value is array

Condition ViewHelper which renders the `then` child if type of
provided value is array.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isArray">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Type of value is array

Condition ViewHelper which renders the `then` child if type of
provided value is array.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isBoolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Type of value is a boolean

Condition ViewHelper which renders the `then` child if type of
provided value is a boolean.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isBoolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Type of value is a boolean

Condition ViewHelper which renders the `then` child if type of
provided value is a boolean.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isDomainObject">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is a domain object

Condition ViewHelper which renders the `then` child if provided
value is a domain object, i.e. it inherits from extbase's base
class]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isDomainObject">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is a domain object

Condition ViewHelper which renders the `then` child if provided
value is a domain object, i.e. it inherits from extbase's base
class]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isFloat">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Type of value is float

Condition ViewHelper which renders the `then` child if type of
provided value is float.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isFloat">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Type of value is float

Condition ViewHelper which renders the `then` child if type of
provided value is float.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isInstanceOf">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is an instance of a class

Condition ViewHelper which renders the `then` child if provided
value is an instance of provided class name.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isInstanceOf">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is an instance of a class

Condition ViewHelper which renders the `then` child if provided
value is an instance of provided class name.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isInteger">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Type of value is integer

Condition ViewHelper which renders the `then` child if type of
provided value is integer.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isInteger">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Type of value is integer

Condition ViewHelper which renders the `then` child if type of
provided value is integer.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isObject">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is an object

Condition ViewHelper which renders the `then` child if provided
value is an object.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isObject">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is an object

Condition ViewHelper which renders the `then` child if provided
value is an object.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isQueryResult">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is a query result

Condition ViewHelper which renders the `then` child if provided
value is an extbase query result]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isQueryResult">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is a query result

Condition ViewHelper which renders the `then` child if provided
value is an extbase query result]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isString">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Type of value is string

Condition ViewHelper which renders the `then` child if type of
provided value is string.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isString">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Type of value is string

Condition ViewHelper which renders the `then` child if type of
provided value is string.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isTraversable">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value implements interface Traversable

Condition ViewHelper which renders the `then` child if provided
value implements interface Traversable]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.type.isTraversable">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value implements interface Traversable

Condition ViewHelper which renders the `then` child if provided
value implements interface Traversable]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.variable.isNull">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is NULL

Condition ViewHelper which renders the `then` child if provided
value is NULL.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.variable.isNull">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Condition: Value is NULL

Condition ViewHelper which renders the `then` child if provided
value is NULL.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.variable.isset">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Variable: Isset

Renders the `then` child if the variable name given in
the `name` argument exists in the template. The value
can be zero, NULL or an empty string - but the ViewHelper
will still return TRUE if the variable exists.

Combines well with dynamic variable names:

    <!-- if {variableContainingVariableName} is "foo" this checks existence of {foo} -->
    <v:condition.variable.isset name="{variableContainingVariableName}">...</v:condition.variable.isset>
    <!-- if {suffix} is "Name" this checks existence of "variableName" -->
    <v:condition.variable.isset name="variable{suffix}">...</v:condition.variable.isset>
    <!-- outputs value of {foo} if {bar} is defined -->
    {foo -> v:condition.variable.isset(name: bar)}]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="condition.variable.isset">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Variable: Isset

Renders the `then` child if the variable name given in
the `name` argument exists in the template. The value
can be zero, NULL or an empty string - but the ViewHelper
will still return TRUE if the variable exists.

Combines well with dynamic variable names:

    <!-- if {variableContainingVariableName} is "foo" this checks existence of {foo} -->
    <v:condition.variable.isset name="{variableContainingVariableName}">...</v:condition.variable.isset>
    <!-- if {suffix} is "Name" this checks existence of "variableName" -->
    <v:condition.variable.isset name="variable{suffix}">...</v:condition.variable.isset>
    <!-- outputs value of {foo} if {bar} is defined -->
    {foo -> v:condition.variable.isset(name: bar)}]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.get">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to render content elements in Fluid page templates]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="column" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the column to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="limit" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional limit to the number of content elements to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'sorting'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort field of content elements - RAND() supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortDirection"
default="'ASC'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort direction of content elements]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set, selects only content from this page UID]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="contentUids" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, replaces all conditions with an "uid IN (1,2,3)" style condition using the UID values from this array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sectionIndexOnly"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, only renders/gets content that is marked as "include in section index"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slide" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Enables Content Sliding - amount of levels which shall get walked up the rootline. For infinite sliding (till the rootpage) set to -1)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slideCollect" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="slideCollectReverse"
default="0" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Normally when collecting content elements the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="loadRegister" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[List of LOAD_REGISTER variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="render" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional returning variable as original table rows]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideUntranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.get">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to render content elements in Fluid page templates]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="column" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the column to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="limit" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional limit to the number of content elements to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'sorting'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort field of content elements - RAND() supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortDirection"
default="'ASC'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort direction of content elements]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set, selects only content from this page UID]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="contentUids" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, replaces all conditions with an "uid IN (1,2,3)" style condition using the UID values from this array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sectionIndexOnly"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, only renders/gets content that is marked as "include in section index"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slide" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Enables Content Sliding - amount of levels which shall get walked up the rootline. For infinite sliding (till the rootpage) set to -1)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slideCollect" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="slideCollectReverse"
default="0" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Normally when collecting content elements the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="loadRegister" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[List of LOAD_REGISTER variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="render" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional returning variable as original table rows]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideUntranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.info">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to access data of the current content element record]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="contentUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, this UID will be used to fetch content element data instead of using the current content element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, only this field will be returned/assigned instead of the complete content element record.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.random.get">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper for fetching a random content element in Fluid page templates]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="column" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the column to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="limit" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional limit to the number of content elements to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'sorting'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort field of content elements - RAND() supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortDirection"
default="'ASC'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort direction of content elements]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set, selects only content from this page UID]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="contentUids" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, replaces all conditions with an "uid IN (1,2,3)" style condition using the UID values from this array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sectionIndexOnly"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, only renders/gets content that is marked as "include in section index"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slide" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Enables Content Sliding - amount of levels which shall get walked up the rootline. For infinite sliding (till the rootpage) set to -1)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slideCollect" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="slideCollectReverse"
default="0" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Normally when collecting content elements the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="loadRegister" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[List of LOAD_REGISTER variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="render" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional returning variable as original table rows]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideUntranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.random.get">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper for fetching a random content element in Fluid page templates]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="column" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the column to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="limit" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional limit to the number of content elements to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'sorting'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort field of content elements - RAND() supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortDirection"
default="'ASC'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort direction of content elements]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set, selects only content from this page UID]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="contentUids" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, replaces all conditions with an "uid IN (1,2,3)" style condition using the UID values from this array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sectionIndexOnly"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, only renders/gets content that is marked as "include in section index"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slide" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Enables Content Sliding - amount of levels which shall get walked up the rootline. For infinite sliding (till the rootpage) set to -1)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slideCollect" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="slideCollectReverse"
default="0" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Normally when collecting content elements the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="loadRegister" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[List of LOAD_REGISTER variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="render" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional returning variable as original table rows]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideUntranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.random.render">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper for rendering a random content element in Fluid page templates]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="column" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the column to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="limit" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional limit to the number of content elements to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'sorting'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort field of content elements - RAND() supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortDirection"
default="'ASC'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort direction of content elements]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set, selects only content from this page UID]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="contentUids" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, replaces all conditions with an "uid IN (1,2,3)" style condition using the UID values from this array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sectionIndexOnly"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, only renders/gets content that is marked as "include in section index"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slide" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Enables Content Sliding - amount of levels which shall get walked up the rootline. For infinite sliding (till the rootpage) set to -1)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slideCollect" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="slideCollectReverse"
default="0" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Normally when collecting content elements the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="loadRegister" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[List of LOAD_REGISTER variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="render" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional returning variable as original table rows]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideUntranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.random.render">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper for rendering a random content element in Fluid page templates]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="column" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the column to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="limit" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional limit to the number of content elements to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'sorting'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort field of content elements - RAND() supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortDirection"
default="'ASC'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort direction of content elements]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set, selects only content from this page UID]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="contentUids" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, replaces all conditions with an "uid IN (1,2,3)" style condition using the UID values from this array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sectionIndexOnly"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, only renders/gets content that is marked as "include in section index"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slide" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Enables Content Sliding - amount of levels which shall get walked up the rootline. For infinite sliding (till the rootpage) set to -1)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slideCollect" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="slideCollectReverse"
default="0" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Normally when collecting content elements the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="loadRegister" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[List of LOAD_REGISTER variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="render" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional returning variable as original table rows]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideUntranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.random.render">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper for rendering a random content element in Fluid page templates]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="column" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the column to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="limit" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional limit to the number of content elements to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'sorting'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort field of content elements - RAND() supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortDirection"
default="'ASC'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort direction of content elements]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set, selects only content from this page UID]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="contentUids" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, replaces all conditions with an "uid IN (1,2,3)" style condition using the UID values from this array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sectionIndexOnly"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, only renders/gets content that is marked as "include in section index"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slide" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Enables Content Sliding - amount of levels which shall get walked up the rootline. For infinite sliding (till the rootpage) set to -1)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slideCollect" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="slideCollectReverse"
default="0" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Normally when collecting content elements the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="loadRegister" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[List of LOAD_REGISTER variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="render" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional returning variable as original table rows]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideUntranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.render">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to render content elements in Fluid page templates]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="column" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the column to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="limit" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional limit to the number of content elements to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'sorting'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort field of content elements - RAND() supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortDirection"
default="'ASC'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort direction of content elements]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set, selects only content from this page UID]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="contentUids" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, replaces all conditions with an "uid IN (1,2,3)" style condition using the UID values from this array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sectionIndexOnly"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, only renders/gets content that is marked as "include in section index"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slide" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Enables Content Sliding - amount of levels which shall get walked up the rootline. For infinite sliding (till the rootpage) set to -1)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slideCollect" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="slideCollectReverse"
default="0" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Normally when collecting content elements the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="loadRegister" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[List of LOAD_REGISTER variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="render" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional returning variable as original table rows]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideUntranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, adds template variable and assumes you manually iterate through {contentRecords}]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.render">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to render content elements in Fluid page templates]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="column" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the column to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="limit" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional limit to the number of content elements to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'sorting'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort field of content elements - RAND() supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortDirection"
default="'ASC'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort direction of content elements]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set, selects only content from this page UID]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="contentUids" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, replaces all conditions with an "uid IN (1,2,3)" style condition using the UID values from this array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sectionIndexOnly"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, only renders/gets content that is marked as "include in section index"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slide" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Enables Content Sliding - amount of levels which shall get walked up the rootline. For infinite sliding (till the rootpage) set to -1)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slideCollect" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="slideCollectReverse"
default="0" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Normally when collecting content elements the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="loadRegister" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[List of LOAD_REGISTER variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="render" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional returning variable as original table rows]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideUntranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, adds template variable and assumes you manually iterate through {contentRecords}]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.resources">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table"
default="'tt_content'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'image'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.resources">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table"
default="'tt_content'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'image'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.resources">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table"
default="'tt_content'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'image'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.resources.fal">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table"
default="'tt_content'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'image'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.resources.fal">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table"
default="'tt_content'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'image'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="content.resources.fal">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table"
default="'tt_content'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'image'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="context.get">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Context: Get

Returns the current application context which may include possible sub-contexts.
The application context can be 'Production', 'Development' or 'Testing'.
Additionally each context can be extended with custom sub-contexts like: 'Production/Staging' or ' Production/Staging/Server1'.
If no application context has been set by the configuration, then the default context is 'Production'.

#### Note about how to set the application context

The context TYPO3 CMS runs in is specified through the environment variable TYPO3_CONTEXT.
It can be set by .htaccess or in the server configuration

See: http://docs.typo3.org/typo3cms/CoreApiReference/ApiOverview/Bootstrapping/Index.html#bootstrapping-context]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="debug">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### ViewHelper Debug ViewHelper (sic)

Debugs instances of other ViewHelpers and language
structures. Use in conjunction with other ViewHelpers
to inspect their current and possible arguments and
render their documentation:

    <v:debug><f:format.html>{variable}</f:format.html></v:debug>

Or the same expression in inline syntax:

    {variable -> f:format.html() -> v:debug()}

Can also be used to inspect `ObjectAccessor` instances
(e.g. variables you try to access) and rather than just
dumping the entire contents of the variable as is done
by `<f:debug />`, this ViewHelper makes a very simple
dump with a warning if the variable is not defined. If
an object is encountered (for example a domain object)
this ViewHelper will not dump the object but instead
will scan it for accessible properties (e.g. properties
which have a getter method!) and only present those
properties which can be accessed, along with the type
of variable that property currently contains:

    {domainObject -> v:debug()}

Assuming that `{domainObject}` is an instance of an
object which has two methods: `getUid()` and `getTitle()`,
debugging that instance will render something like this
in plain text:

    Path: {domainObject}
    Value type: object
    Accessible properties on {domainObject}:
       {form.uid} (integer)
       {form.title} (string)

The class itself can contain any number of protected
properties, but only those which have a getter method
can be accessed by Fluid and as therefore we only dump
those properties which you **can in fact access**.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.icon">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Extension: Icon ViewHelper

Outputs the icon of the extension key. Supports both
extension key and extension name arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name, in UpperCamelCase, of the extension to be checked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.icon">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Extension: Icon ViewHelper

Outputs the icon of the extension key. Supports both
extension key and extension name arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name, in UpperCamelCase, of the extension to be checked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.loaded">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Extension: Loaded (Condition) ViewHelper

Condition to check if an extension is loaded.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of extension that must be loaded in order to evaluate as TRUE, UpperCamelCase]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.loaded">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Extension: Loaded (Condition) ViewHelper

Condition to check if an extension is loaded.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of extension that must be loaded in order to evaluate as TRUE, UpperCamelCase]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.path.absolute">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Path: Absolute Extension Folder Path

Returns the absolute path to an extension folder.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name, in UpperCamelCase, of the extension to be checked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional path to append, second argument when calling \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::extPath]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.path.absolute">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Path: Absolute Extension Folder Path

Returns the absolute path to an extension folder.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name, in UpperCamelCase, of the extension to be checked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional path to append, second argument when calling \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::extPath]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.path.relative">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Path: Relative Extension Folder Path

Returns the relative path to an Extension folder.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name, in UpperCamelCase, of the extension to be checked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.path.relative">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Path: Relative Extension Folder Path

Returns the relative path to an Extension folder.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name, in UpperCamelCase, of the extension to be checked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.path.resources">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Path: Relative Extension Resource Path

Site Relative path to Extension Resources/Public folder.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name, in UpperCamelCase, of the extension to be checked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional path to append after output of \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::extRelPath]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.path.resources">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Path: Relative Extension Resource Path

Site Relative path to Extension Resources/Public folder.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name, in UpperCamelCase, of the extension to be checked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional path to append after output of \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::extRelPath]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.path.siteRelative">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Path: Relative Extension Folder Path

Returns the site relative path to an extension folder.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name, in UpperCamelCase, of the extension to be checked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="extension.path.siteRelative">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Path: Relative Extension Folder Path

Returns the site relative path to an extension folder.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name, in UpperCamelCase, of the extension to be checked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="form.fieldName">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Form Field Name View Helper

This viewhelper returns the properly prefixed name of the given
form field and generates the corresponding HMAC to allow posting
of dynamically added fields.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the form field to generate the HMAC for.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of object property. If used in conjunction with <f:form object="...">, "name" argument will be ignored.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="form.select">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Select ViewHelper (with support for Optgroup and Option subnodes)]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of Object Property. If used in conjunction with <f:form object="...">, "name" and "value" properties will be ignored.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="size" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Size of input field]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="disabled" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the input element should be disabled when the page loads]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="multiple" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[if set, multiple select field]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="options" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Associative array with internal IDs as key, and the values are displayed in the select box]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="optionValueField"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, will call the appropriate getter on each object to determine the value.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="optionLabelField"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, will call the appropriate getter on each object to determine the label.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sortByOptionLabel"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If true, List will be sorted by label.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="selectAllByDefault"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified options are selected if none was set before.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="errorClass"
default="'f3-form-error'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class to set if there are errors for this view helper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="form.select">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Select ViewHelper (with support for Optgroup and Option subnodes)]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of Object Property. If used in conjunction with <f:form object="...">, "name" and "value" properties will be ignored.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="size" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Size of input field]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="disabled" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the input element should be disabled when the page loads]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="multiple" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[if set, multiple select field]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="options" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Associative array with internal IDs as key, and the values are displayed in the select box]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="optionValueField"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, will call the appropriate getter on each object to determine the value.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="optionLabelField"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, will call the appropriate getter on each object to determine the label.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sortByOptionLabel"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If true, List will be sorted by label.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="selectAllByDefault"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified options are selected if none was set before.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="errorClass"
default="'f3-form-error'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class to set if there are errors for this view helper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="form.select">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Select ViewHelper (with support for Optgroup and Option subnodes)]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of Object Property. If used in conjunction with <f:form object="...">, "name" and "value" properties will be ignored.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="size" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Size of input field]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="disabled" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the input element should be disabled when the page loads]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="multiple" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[if set, multiple select field]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="options" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Associative array with internal IDs as key, and the values are displayed in the select box]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="optionValueField"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, will call the appropriate getter on each object to determine the value.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="optionLabelField"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, will call the appropriate getter on each object to determine the label.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sortByOptionLabel"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If true, List will be sorted by label.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="selectAllByDefault"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified options are selected if none was set before.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="errorClass"
default="'f3-form-error'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class to set if there are errors for this view helper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="form.select">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Select ViewHelper (with support for Optgroup and Option subnodes)]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of Object Property. If used in conjunction with <f:form object="...">, "name" and "value" properties will be ignored.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="size" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Size of input field]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="disabled" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the input element should be disabled when the page loads]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="multiple" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[if set, multiple select field]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="options" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Associative array with internal IDs as key, and the values are displayed in the select box]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="optionValueField"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, will call the appropriate getter on each object to determine the value.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="optionLabelField"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, will call the appropriate getter on each object to determine the label.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sortByOptionLabel"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If true, List will be sorted by label.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="selectAllByDefault"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified options are selected if none was set before.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="errorClass"
default="'f3-form-error'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class to set if there are errors for this view helper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="form.select.optgroup">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optgroup ViewHelper to use under vhs:form.select]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="label" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for this option group]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="form.select.optgroup">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optgroup ViewHelper to use under vhs:form.select]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="label" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for this option group]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="form.select.option">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Option ViewHelper to use under vhs:form.select]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of Object Property. If used in conjunction with <f:form object="...">, "name" and "value" properties will be ignored.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="selected" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Set to "selected" to mark field as selected. If not present, selected status will be determined by select value]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="form.select.option">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Option ViewHelper to use under vhs:form.select]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of Object Property. If used in conjunction with <f:form object="...">, "name" and "value" properties will be ignored.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="selected" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Set to "selected" to mark field as selected. If not present, selected status will be determined by select value]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="form.select.option">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Option ViewHelper to use under vhs:form.select]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of Object Property. If used in conjunction with <f:form object="...">, "name" and "value" properties will be ignored.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="selected" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Set to "selected" to mark field as selected. If not present, selected status will be determined by select value]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="form.select.option">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Option ViewHelper to use under vhs:form.select]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value of input tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="property" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of Object Property. If used in conjunction with <f:form object="...">, "name" and "value" properties will be ignored.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="selected" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Set to "selected" to mark field as selected. If not present, selected status will be determined by select value]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.append">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Format: Append string content

Appends a string after another string. Although this task is very
easily done in standard Fluid - i.e. {subject}{add} - this
ViewHelper makes advanced chained inline processing possible:

    <!-- useful when needing to chain string processing. Remove all "foo" and "bar"
         then add a text containing both "foo" and "bar", then format as HTML -->
    {text -> v:format.eliminate(strings: 'foo,bar')
          -> v:format.append(add: ' - my foo and bar are the only ones in this text.')
          -> f:format.html()}
    <!-- NOTE: you do not have to break the lines; done here only for presentation purposes -->

Makes no sense used as tag based ViewHelper:

    <!-- DO NOT USE - depicts COUNTERPRODUCTIVE usage! -->
    <v:format.append add="{f:translate(key: 're')}">{subject}</v:format.append>
    <!-- ... which is the exact same as ... -->
    <f:translate key="re" />{subject} <!-- OR --> {f:translate(key: 're')}{subject}

In other words: use this only when you do not have the option of
simply using {subject}{add}, i.e. in complex inline statements used
as attribute values on other ViewHelpers (where tag usage is undesirable).]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="add" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="subject" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.case">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Case Formatting ViewHelper

Formats string case according to provided arguments]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="string" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="case" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.dateRange">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Date range calculation/formatting ViewHelper

Uses DateTime and DateInterval operations to calculate a range
between two DateTimes.

#### Usages

- As formatter, the ViewHelper can output a string value such as
  "2013-04-30 - 2013-05-30" where you can configure both the start
  and end date (or their common) formats as well as the "glue"
  which binds the two dates together.
- As interval calculator, the ViewHelper can be used with a special
  "intervalFormat" which is a string used in the constructor method
  for the DateInterval class - for example, "P3M" to add three months.
  Used this way, you can specify the start date (or rely on the
  default "now" DateTime) and specify the "intervalFormat" to add
  your desired duration to your starting date and use that as end
  date. Without the "return" attribute, this mode simply outputs
  the formatted dates with interval deciding the end date.
- When used with the "return" attribute you can specify which type
  of data to return:
  - if "return" is "DateTime", a single DateTime instance is returned
    (which is the end date). Use this with a start date to return the
    DateTime corresponding to "intervalFormat" into the future/past.
  - if "return" is a string such as "w", "d", "h" etc. the corresponding
    counter value (weeks, days, hours etc.) is returned.
  - if "return" is an array of counter IDs, for example Array("w", "d"),
    the corresponding counters from the range are returned as an array.

#### Note about LLL support and array consumers

When used with the "return" attribute and when this attribute is an
array, the output becomes suitable for consumption by f:translate, v:l
or f:format.sprintf for example - as the "arguments" attribute:

    <f:translate key="myDateDisplay"
        arguments="{v:format.dateRange(intervalFormat: 'P3W', return: {0: 'w', 1: 'd'})}"
    />

Which if "myDateDisplay" is a string such as "Deadline: %d week(s) and
%d day(s)" would output a result such as "Deadline: 4 week(s) and 2 day(s)".

> Tip: the values returned by this ViewHelper in both array and single
> value return modes, are also nicely consumable by the "math" suite
> of ViewHelpers, for example `v:math.division` would be able to divide
> number of days by two, three etc. to further divide the date range.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="start" default="'now'"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Start date which can be a DateTime object or a string consumable by DateTime constructor]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="end" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[End date which can be a DateTime object or a string consumable by DateTime constructor]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="intervalFormat"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Interval format consumable by DateInterval]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="'Y-m-d'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Date format to apply to both start and end date]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="startFormat" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Date format to apply to start date]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="endFormat" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Date format to apply to end date]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="glue" default="'-'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Glue string to concatenate dates with]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="spaceGlue" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE glue string is surrounded with whitespace]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="return" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Return type; can be exactly "DateTime" to return a DateTime instance, a string like "w" or "d" to return weeks, days between the two dates - or an array of w, d, etc. strings to return the corresponding range count values as an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.eliminate">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Character/string/whitespace elimination ViewHelper

There is no example - each argument describes how it should be
used and arguments can be used individually or in any combination.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="caseSensitive"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to perform case sensitive replacement]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="characters" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Characters to remove. Array or string, i.e. {0: 'a', 1: 'b', 2: 'c'} or 'abc' to remove all occurrences of a, b and c]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="strings" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Strings to remove. Array or CSV, i.e. {0: 'foo', 1: 'bar'} or 'foo,bar' to remove all occorrences of foo and bar. If your strings overlap then place the longest match first]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="whitespace" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Eliminate ALL whitespace characters]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="tabs" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Eliminate only tab whitespaces]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="unixBreaks" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Eliminate only UNIX line breaks]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="windowsBreaks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Eliminates only Windows carriage returns]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="digits" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Eliminates all number characters (but not the dividers between floats converted to strings)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="letters" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Eliminates all letters (non-numbers, non-whitespace, non-syntactical)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="nonAscii" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Eliminates any ASCII char]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.hide">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Hides output from browser, but still renders tag content
which means any ViewHelper inside the tag content still
gets processed.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:boolean" name="disabled" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders content - use to quickly enable/disable Fluid code]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.json.decode">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Converts the JSON encoded argument into a PHP variable]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="json" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.json.encode">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### JSON Encoding ViewHelper

Returns a string containing the JSON representation of the argument.
The argument may be any of the following types:

- arrays, associative and traditional
- DomainObjects
- arrays containing DomainObjects
- ObjectStorage containing DomainObjects
- standard types (string, integer, boolean, float, NULL)
- DateTime including ones found as property values on DomainObjects

Recursion protection is enabled for DomainObjects with the option to
add a special marker (any variable type above also supported here)
which is inserted where an object which would cause recursion would
be placed.

Be specially careful when you JSON encode DomainObjects which have
recursive relations to itself using either 1:n or m:n - in this case
the one member of the converted relation will be whichever value you
specified as "recursionMarker" - or the default value, NULL. When
using the output of such conversion in JavaScript please make sure you
check the type before assuming that every member of a converted 1:n
or m:n recursive relation is in fact a JavaScript. Not doing so may
result in fatal JavaScript errors in the client browser.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Array or Traversable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useTraversableKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, preserves keys from Traversables converted to arrays. Not recommended for ObjectStorages!]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="preventRecursion"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, allows recursion to occur which could potentially be fatal to the output unless managed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="recursionMarker"
default="NULL" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Any value - string, integer, boolean, object or NULL - inserted instead of recursive instances of objects]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dateTimeFormat"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A date() format for converting DateTime values to JSON-compatible values. NULL means JS UNIXTIME (time()*1000)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.markdown">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Markdown Transformation ViewHelper

Requires an installed "markdown" utility, the specific
implementation is less important since Markdown has no
configuration options. However, the utility or shell
scipt must:

- accept input from STDIN
- output to STDOUT
- place errors in STDERR
- be executable according to `open_basedir` and others
- exist within (one or more of) TYPO3's configured executable paths

In other words, *NIX standard behavior must be used.

See: http://daringfireball.net/projects/markdown/]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="text" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="htmlentities"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.placeholder.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Placeholder Image ViewHelper

Inserts a placeholder image from http://placehold.it/]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="text" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="640"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of rendered placeholder image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="false"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of rendered placeholder image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="backgroundColor"
default="'333333'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Background color]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="textColor"
default="'FFFFFF'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text color]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.placeholder.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Placeholder Image ViewHelper

Inserts a placeholder image from http://placehold.it/]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="text" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="640"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of rendered placeholder image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="false"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of rendered placeholder image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="backgroundColor"
default="'333333'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Background color]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="textColor"
default="'FFFFFF'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text color]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.placeholder.lipsum">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Lipsum ViewHelper

Renders Lorem Ipsum text according to provided arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="lipsum" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[String of paragraphs file path or EXT:myext/path/to/file]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="paragraphs" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of paragraphs to output]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="wordsPerParagraph"
default="NULL" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of words per paragraph]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="skew" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Amount in number of words to vary the number of words per paragraph]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="html" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders output as HTML paragraph tags in the same way an RTE would]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="parseFuncTSPath"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If you want another parseFunc for HTML processing, enter the TS path here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.plaintext">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Processes output as plaintext. Will trim whitespace off
each line that is provided, making display in a <pre>
work correctly indented even if the source is not.

Expects that you use f:format.htmlentities or similar
if you do not want HTML to be displayed as HTML, or
simply want it stripped out.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.prepend">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Format: Prepend string content

Prepends one string on another. Although this task is very
easily done in standard Fluid - i.e. {add}{subject} - this
ViewHelper makes advanced chained inline processing possible:]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="add" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="subject" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.regularExpression">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Formats or gets detected substrings by regular expression.
Returns matches if `return="TRUE"`, otherwise replaces any
occurrences of `$pattern`.
simply returns]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="pattern" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The regular expression pattern to search for]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="replacement" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The desired value to insert instead of detected matches]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="subject" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The subject in which to perform replacements/detection; taken from tag content if not specified.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="return" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.removeXss">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Removes XSS from $string

Class RemoveXssViewHelper]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="string" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.replace">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Replaces $substring in $content with $replacement.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="substring" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="replacement" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="count" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.sanitizeString">
<xsd:annotation>
<xsd:documentation>
<![CDATA[URL text segment sanitizer. Sanitizes the content into a
valid URL segment value which is usable in an URL without
further processing. For example, the text "I am Mr. Brown,
how are you?" becomes "i-am-mr-brown-how-are-you". Special
characters like diacritics or umlauts are transliterated.
The built-in character map can be overriden or extended by
providing an associative array of custom mappings.

Also useful when creating anchor link names, for example
for news entries in your custom EXT:news list template, in
which case each news item's title would become an anchor:

<a name="{newsItem.title -> v:format.url.sanitizeString()}"></a>

And links would look much like the detail view links:

/news/#this-is-a-newsitem-title

When used with list views it has the added benefit of not
breaking if the item referenced is removed, it can be read
by Javascript (for example to dynamically expand the news
item being referenced). The sanitized urls are also ideal
to use for AJAX based detail views - and in almot all cases
the sanitized string will be 100% identical to the one used
by Realurl when translating using table lookups.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="string" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The string to sanitize.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="customMap" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Associative array of additional characters to replace or use to override built-in mappings.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.substring">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Gets a substring from a string or string-compatible value]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content string to substring]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="start" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Positive or negative offset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="length" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Positive or negative length]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.tidy">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tidy-processes a string (HTML source), applying proper
indentation.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.trim">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Trims $content by stripping off $characters (string list
of individual chars to strip off, default is all whitespaces).]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="characters" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.url.decode">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Urldecodes the provided string]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.url.encode">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Urlencodes the provided string]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.url.sanitizeString">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="string" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The string to sanitize.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="customMap" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Associative array of additional characters to replace or use to override built-in mappings.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="format.url.sanitizeString">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="string" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The string to sanitize.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="customMap" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Associative array of additional characters to replace or use to override built-in mappings.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="if">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="stack" default="NULL"
php:type="array" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The stack to be evaluated]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="if">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="stack" default="NULL"
php:type="array" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The stack to be evaluated]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.chunk">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Creates chunks from an input Array/Traversable with option to allocate items to a fixed number of chunks]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="count" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The count of items per chunk or if fixed number of chunks]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fixed" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Whether to allocate items to a fixed number of chunks or not]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="subject" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The subject Traversable/Array instance to shift]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, inserts a template variable with this name, then renders the child content, then removes the variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="preserveKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to true, the original array keys will be preserved in the chunks]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.explode">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Explode ViewHelper

Explodes a string by $glue]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[String to be exploded by glue)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="glue" default="','"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[String used as glue in the string to be exploded. Use glue value of "constant:NAMEOFCONSTANT" (fx "constant:LF" for linefeed as glue)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Template variable name to assign. If not specified returns the result array instead]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.extract">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Iterator / Extract VieWHelper

Loop through the iterator and extract a key, optionally join the
results if more than one value is found.

#### Extract values from an array by key

The extbase version of indexed_search returns an array of the
previous search, which cannot easily be shown in the input field
of the result page. This can be solved.

#### Input from extbase version of indexed_search">

    array(
          0 => array(
            'sword' => 'firstWord',
            'oper' => 'AND'
        ),
        1 => array(
            'sword' => 'secondWord',
            'oper' => 'AND'
        ),
        3 => array(
            'sword' => 'thirdWord',
            'oper' => 'AND'
        )
    )

Show the previous search words in the search form of the
result page:

#### Example
    <f:form.textfield name="search[sword]"
        value="{v:iterator.extract(key:'sword', content: searchWords) -> v:iterator.implode(glue: ' ')}"
        class="tx-indexedsearch-searchbox-sword" />

#### Get the names of several users

Provided we have a bunch of FrontendUsers and we need to show
their firstname combined into a string:

    <h2>Welcome
    <v:iterator.implode glue=", "><v:iterator.extract key="firstname" content="frontendUsers" /></v:iterator.implode>
    <!-- alternative: -->
    {frontendUsers -> v:iterator.extract(key: 'firstname') -> v:iterator.implode(glue: ', ')}
    </h2>

#### Output

    <h2>Welcome Peter, Paul, Marry</h2>

#### Complex example

    {anArray->v:iterator.extract(path: 'childProperty.secondNestedChildObject')->v:iterator.sort(direction: 'DESC', sortBy: 'propertyOnSecondChild')->v:iterator.slice(length: 10)->v:iterator.extract(key: 'uid')}

#### Single return value

    Outputs the "uid" value of the first record in variable $someRecords without caring if there are more than
    one records. Always extracts the first value and then stops. Equivalent of chaning -> v:iterator.first().
    {someRecords -> v:iterator.extract(key: 'uid', single: TRUE)}]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="key" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The name of the key from which you wish to extract the value]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="content" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The array or Iterator that contains either the value or arrays of values]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="recursive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, attempts to extract the key from deep nested arrays]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="single" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, returns only one value - always the first one - instead of an array of values]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.filter">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Iterator: Filter ViewHelper

Filters an array by filtering the array, analysing each member
and assering if it is equal to (weak type) the `filter` parameter.
If `propertyName` is set, the ViewHelper will try to extract this
property from each member of the array.

Iterators and ObjectStorage etc. are supported.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="subject" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The subject iterator/array to be filtered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="filter" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The comparison value]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="propertyName" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional property name to extract and use for comparison instead of the object; use on ObjectStorage etc. Note: supports dot-path expressions.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="preserveKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, keys in the array are preserved - even if they are numeric]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="invert" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Invert the behavior of the view helper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.first">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the first element of $haystack]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.for">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Repeats rendering of children with a typical for loop: starting at
index $from it will loop until the index has reached $to.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="iteration" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Variable name to insert result into, suppresses output]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="to" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number that the index needs to reach before stopping]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="from" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Starting number for the index]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="step" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Stepping number that the index is increased by after each loop]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.for">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Repeats rendering of children with a typical for loop: starting at
index $from it will loop until the index has reached $to.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="iteration" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Variable name to insert result into, suppresses output]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="to" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number that the index needs to reach before stopping]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="from" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Starting number for the index]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="step" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Stepping number that the index is increased by after each loop]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.implode">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Implode ViewHelper

Implodes an array or array-convertible object by $glue]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[String to be exploded by glue)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="glue" default="','"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[String used as glue in the string to be exploded. Use glue value of "constant:NAMEOFCONSTANT" (fx "constant:LF" for linefeed as glue)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Template variable name to assign. If not specified returns the result array instead]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.implode">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Implode ViewHelper

Implodes an array or array-convertible object by $glue]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[String to be exploded by glue)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="glue" default="','"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[String used as glue in the string to be exploded. Use glue value of "constant:NAMEOFCONSTANT" (fx "constant:LF" for linefeed as glue)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Template variable name to assign. If not specified returns the result array instead]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.indexOf">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Searches $haystack for index of $needle, returns -1 if $needle
is not in $haystack]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Needle to search for in haystack]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="considerKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tell whether to consider keys in the search assuming haystack is an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.indexOf">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Searches $haystack for index of $needle, returns -1 if $needle
is not in $haystack]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Needle to search for in haystack]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="considerKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tell whether to consider keys in the search assuming haystack is an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.indexOf">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Searches $haystack for index of $needle, returns -1 if $needle
is not in $haystack]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Needle to search for in haystack]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="considerKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tell whether to consider keys in the search assuming haystack is an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.intersect">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Intersects arrays/Traversables $a and $b into an array]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First Array/Traversable/CSV]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second Array/Traversable/CSV]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.keys">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Gets keys from an iterator]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="subject" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Input to work on - Array/Traversable/...]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.last">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the last element of $haystack]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.loop">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Repeats rendering of children $count times while updating $iteration]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="iteration" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Variable name to insert result into, suppresses output]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="count" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of times to render child content]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minimum" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum number of loops before stopping]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maximum"
default="9223372036854775807" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maxiumum number of loops before stopping]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.loop">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Repeats rendering of children $count times while updating $iteration]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="iteration" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Variable name to insert result into, suppresses output]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="count" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of times to render child content]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minimum" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum number of loops before stopping]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maximum"
default="9223372036854775807" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maxiumum number of loops before stopping]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.merge">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Merges arrays/Traversables $a and $b into an array]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second array/Traversable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First array/Traversable - if not set, the ViewHelper can be in a chain (inline-notation)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useKeys" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, comparison is done while also observing (and merging) the keys used in each array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.next">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns next element in array $haystack from position of $needle]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Needle to search for in haystack]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="considerKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tell whether to consider keys in the search assuming haystack is an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.next">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns next element in array $haystack from position of $needle]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Needle to search for in haystack]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="considerKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tell whether to consider keys in the search assuming haystack is an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.next">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns next element in array $haystack from position of $needle]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Needle to search for in haystack]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="considerKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tell whether to consider keys in the search assuming haystack is an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.pop">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Pops the last value off $subject (but does not change $subject itself as array_pop would)]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="subject" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The subject Traversable/Array instance to pop]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, inserts a template variable with this name, then renders the child content, then removes the variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.previous">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns previous element in array $haystack from position of $needle]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Needle to search for in haystack]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="considerKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tell whether to consider keys in the search assuming haystack is an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.previous">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns previous element in array $haystack from position of $needle]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Needle to search for in haystack]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="considerKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tell whether to consider keys in the search assuming haystack is an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.previous">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns previous element in array $haystack from position of $needle]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="needle" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Needle to search for in haystack]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Haystack in which to look for needle]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="considerKeys"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tell whether to consider keys in the search assuming haystack is an array.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.random">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns random element from array]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="subject" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Which variable to update in the TemplateVariableContainer. If left out, returns the random element instead of updating the variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.reverse">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Iterator Reversal ViewHelper

Reverses the order of every member of an Iterator/Array,
preserving the original keys.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:anySimpleType" name="subject"
default="NULL" php:type="array|\Iterator">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An array or Iterator implementation to sort]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Which variable to update in the TemplateVariableContainer. If left out, returns reversed data instead of updating the variable (i.e. reference or copy)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.shift">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shifts the first value off $subject (but does not change $subject itself as array_shift would)]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="subject" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The subject Traversable/Array instance to shift]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, inserts a template variable with this name, then renders the child content, then removes the variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.slice">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Slice an Iterator by $start and $length]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="haystack" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="start" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="length" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.sort">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sorts an instance of ObjectStorage, an Iterator implementation,
an Array or a QueryResult (including Lazy counterparts).

Can be used inline, i.e.:
<f:for each="{dataset -> vhs:iterator.sort(sortBy: 'name')}" as="item">
   // iterating data which is ONLY sorted while rendering this particular loop
</f:for>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:anySimpleType" name="subject"
default="NULL" php:type="array|\Iterator">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An array or Iterator implementation to sort]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Which variable to update in the TemplateVariableContainer. If left out, returns sorted data instead of updating the variable (i.e. reference or copy)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortBy" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Which property/field to sort by - leave out for numeric sorting based on indexes(keys)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'ASC'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ASC, DESC, RAND or SHUFFLE. RAND preserves keys, SHUFFLE does not - but SHUFFLE is faster]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortFlags"
default="'SORT_REGULAR'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Constant name from PHP for `SORT_FLAGS`: `SORT_REGULAR`, `SORT_STRING`, `SORT_NUMERIC`, `SORT_NATURAL`, `SORT_LOCALE_STRING` or `SORT_FLAG_CASE`. You can provide a comma seperated list or array to use a combination of flags.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="iterator.values">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Gets values from an iterator, removing current keys (if any exist)]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="subject" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="l">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### L (localisation) ViewHelper

An extremely shortened and much more dev-friendly
alternative to f:translate. Automatically outputs
the name of the LLL reference if it is not found
and the default value is not set, making it much
easier to identify missing labels when translating.

### Examples

    <v:l>some.label</v:l>
    <v:l key="some.label" />
    <v:l arguments="{0: 'foo', 1: 'bar'}">some.label</v:l>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="key" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Translation Key]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Translation Key compatible to TYPO3 Flow]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="default" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[if the given locallang key could not be found, this value is used. If this argument is not set, child nodes will be used to render the default]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="htmlEscape" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[TRUE if the result should be htmlescaped. This won't have an effect for the default value]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="arguments" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Arguments to be replaced in the resulting string]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[UpperCamelCased extension key (for example BlogExample)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="l">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### L (localisation) ViewHelper

An extremely shortened and much more dev-friendly
alternative to f:translate. Automatically outputs
the name of the LLL reference if it is not found
and the default value is not set, making it much
easier to identify missing labels when translating.

### Examples

    <v:l>some.label</v:l>
    <v:l key="some.label" />
    <v:l arguments="{0: 'foo', 1: 'bar'}">some.label</v:l>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="key" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Translation Key]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Translation Key compatible to TYPO3 Flow]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="default" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[if the given locallang key could not be found, this value is used. If this argument is not set, child nodes will be used to render the default]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="htmlEscape" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[TRUE if the result should be htmlescaped. This won't have an effect for the default value]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="arguments" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Arguments to be replaced in the resulting string]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[UpperCamelCased extension key (for example BlogExample)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="link.typolink">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### TypolinkViewhelper

Renders a link with the TypoLink function.
Can be used with the LinkWizard

For more info on the typolink function, please consult the offical core-documentation:
http://docs.typo3.org/typo3cms/TyposcriptIn45MinutesTutorial/TypoScriptFunctions/Typolink/Index.html

### Examples

    <!-- tag -->
    <v:link.typolink configuration="{typoLinkConfiguration}" />
    <v:link.typolink configuration="{object}">My LinkText</v:link.typolink>
    <!-- with a {parameter} variable containing the PID -->
    <v:link.typolink configuration="{parameter: parameter}" />
    <!-- with a {fields.link} variable from the LinkWizard (incl. 'class', 'target' etc.) inside a flux form -->
    <v:link.typolink configuration="{parameter: fields.link}" />
    <!-- same with a {page} variable from fluidpages -->
    <v:link.typolink configuration="{parameter: page.uid}" />
    <!-- With extensive configuration -->
    <v:link.typolink configuration="{parameter: page.uid, additionalParams: '&print=1', title: 'Follow the link'}">Click Me!</v:link.typolink>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="configuration" default="NULL"
php:type="array" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The typoLink configuration]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.average">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Average

Performs average across an array. If $a is an array and
$b is an array, each member of $a is averaged against the
same member in $b. If $a is an array and $b is a number,
each member of $a is averaged agained $b. If $a is an array
this array is averaged to one number. If $a is a number and
$b is not provided or NULL, $a is gracefully returned as an
average value of itself.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional: Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.average">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Average

Performs average across an array. If $a is an array and
$b is an array, each member of $a is averaged against the
same member in $b. If $a is an array and $b is a number,
each member of $a is averaged agained $b. If $a is an array
this array is averaged to one number. If $a is a number and
$b is not provided or NULL, $a is gracefully returned as an
average value of itself.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional: Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.average">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Average

Performs average across an array. If $a is an array and
$b is an array, each member of $a is averaged against the
same member in $b. If $a is an array and $b is a number,
each member of $a is averaged agained $b. If $a is an array
this array is averaged to one number. If $a is a number and
$b is not provided or NULL, $a is gracefully returned as an
average value of itself.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional: Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.ceil">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Ceil

Ceiling on $a which can be either an array-accessible
value (Iterator+ArrayAccess || array) or a raw numeric
value.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.ceil">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Ceil

Ceiling on $a which can be either an array-accessible
value (Iterator+ArrayAccess || array) or a raw numeric
value.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.cube">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Square

Performs $a ^ 3]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.cube">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Square

Performs $a ^ 3]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.cubicRoot">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: CubicRoot

Performs pow($a, 1/3) - cubic or third root]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.cubicRoot">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: CubicRoot

Performs pow($a, 1/3) - cubic or third root]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.division">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Division

Performs division of $a using $b. A can be an array and $b a
number, in which case each member of $a gets divided by $b.
If both $a and $b are arrays, each member of $a is summed
against the corresponding member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.division">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Division

Performs division of $a using $b. A can be an array and $b a
number, in which case each member of $a gets divided by $b.
If both $a and $b are arrays, each member of $a is summed
against the corresponding member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.division">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Division

Performs division of $a using $b. A can be an array and $b a
number, in which case each member of $a gets divided by $b.
If both $a and $b are arrays, each member of $a is summed
against the corresponding member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.floor">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Floor

Floors $a which can be either an array-accessible
value (Iterator+ArrayAccess || array) or a raw numeric
value.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.floor">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Floor

Floors $a which can be either an array-accessible
value (Iterator+ArrayAccess || array) or a raw numeric
value.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.maximum">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Maximum

Gets the highest number in array $a or the highest
number of numbers $a and $b.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.maximum">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Maximum

Gets the highest number in array $a or the highest
number of numbers $a and $b.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.maximum">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Maximum

Gets the highest number in array $a or the highest
number of numbers $a and $b.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.median">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Median

Gets the median value from an array of numbers. If there
is an odd number of numbers the middle value is returned.
If there is an even number of numbers an average of the
two middle numbers is returned.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.median">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Median

Gets the median value from an array of numbers. If there
is an odd number of numbers the middle value is returned.
If there is an even number of numbers an average of the
two middle numbers is returned.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.minimum">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Minimum

Gets the lowest number in array $a or the lowest
number of numbers $a and $b.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.minimum">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Minimum

Gets the lowest number in array $a or the lowest
number of numbers $a and $b.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.minimum">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Minimum

Gets the lowest number in array $a or the lowest
number of numbers $a and $b.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.modulo">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Modulo
Perform modulo on $input. Returns the same type as $input,
i.e. if given an array, will transform each member and return
the result. Supports array and Iterator (in the following
descriptions "array" means both these types):

If $a and $b are both arrays of the same size then modulo is
performed on $a using members of $b, by their index (so these
must match in both arrays).

If $a is an array and $b is a number then modulo is performed
on $a using $b for each calculation.

If $a and $b are both numbers simple modulo is performed.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.modulo">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Modulo
Perform modulo on $input. Returns the same type as $input,
i.e. if given an array, will transform each member and return
the result. Supports array and Iterator (in the following
descriptions "array" means both these types):

If $a and $b are both arrays of the same size then modulo is
performed on $a using members of $b, by their index (so these
must match in both arrays).

If $a is an array and $b is a number then modulo is performed
on $a using $b for each calculation.

If $a and $b are both numbers simple modulo is performed.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.modulo">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Modulo
Perform modulo on $input. Returns the same type as $input,
i.e. if given an array, will transform each member and return
the result. Supports array and Iterator (in the following
descriptions "array" means both these types):

If $a and $b are both arrays of the same size then modulo is
performed on $a using members of $b, by their index (so these
must match in both arrays).

If $a is an array and $b is a number then modulo is performed
on $a using $b for each calculation.

If $a and $b are both numbers simple modulo is performed.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.power">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Power

Performs pow($a, $b) where $a is the base and $b is the exponent.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.power">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Power

Performs pow($a, $b) where $a is the base and $b is the exponent.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.power">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Power

Performs pow($a, $b) where $a is the base and $b is the exponent.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.product">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Math: Product (multiplication)

Product (multiplication) of $a and $b. A can be an array and $b a
number, in which case each member of $a gets multiplied by $b.
If $a is an array and $b is not provided then array_product is
used to return a single numeric value. If both $a and $b are
arrays, each member of $a is multiplied against the corresponding
member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.product">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Math: Product (multiplication)

Product (multiplication) of $a and $b. A can be an array and $b a
number, in which case each member of $a gets multiplied by $b.
If $a is an array and $b is not provided then array_product is
used to return a single numeric value. If both $a and $b are
arrays, each member of $a is multiplied against the corresponding
member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.product">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Math: Product (multiplication)

Product (multiplication) of $a and $b. A can be an array and $b a
number, in which case each member of $a gets multiplied by $b.
If $a is an array and $b is not provided then array_product is
used to return a single numeric value. If both $a and $b are
arrays, each member of $a is multiplied against the corresponding
member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.range">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Range

Gets the lowest and highest number from an array of numbers.
Returns an array of [low, high]. For individual low/high
values please use v:math.maximum and v:math.minimum.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.range">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Range

Gets the lowest and highest number from an array of numbers.
Returns an array of [low, high]. For individual low/high
values please use v:math.maximum and v:math.minimum.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.round">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Round

Rounds off $a which can be either an array-accessible
value (Iterator+ArrayAccess || array) or a raw numeric
value.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="decimals" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of decimals]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.round">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Round

Rounds off $a which can be either an array-accessible
value (Iterator+ArrayAccess || array) or a raw numeric
value.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="decimals" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of decimals]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.squareRoot">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: SquareRoot

Performs sqrt($a)]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.squareRoot">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: SquareRoot

Performs sqrt($a)]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.square">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Square

Performs $a ^ 2]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.square">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Square

Performs $a ^ 2]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.subtract">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Subtract

Performs subtraction of $a and $b. A can be an array and $b a
number, in which case each member of $a gets subtracted $b.
If $a is an array and $b is not provided then neg. array_sum is
used to return a single numeric value. If both $a and $b are
arrays, each member of $a is summed against the corresponding
member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional: Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.subtract">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Subtract

Performs subtraction of $a and $b. A can be an array and $b a
number, in which case each member of $a gets subtracted $b.
If $a is an array and $b is not provided then neg. array_sum is
used to return a single numeric value. If both $a and $b are
arrays, each member of $a is summed against the corresponding
member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional: Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.subtract">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Subtract

Performs subtraction of $a and $b. A can be an array and $b a
number, in which case each member of $a gets subtracted $b.
If $a is an array and $b is not provided then neg. array_sum is
used to return a single numeric value. If both $a and $b are
arrays, each member of $a is summed against the corresponding
member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional: Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.sum">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Sum

Performs sum of $a and $b. A can be an array and $b a
number, in which case each member of $a gets summed with $b.
If $a is an array and $b is not provided then array_sum is
used to return a single numeric value. If both $a and $b are
arrays, each member of $a is summed against the corresponding
member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional: Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.sum">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Sum

Performs sum of $a and $b. A can be an array and $b a
number, in which case each member of $a gets summed with $b.
If $a is an array and $b is not provided then array_sum is
used to return a single numeric value. If both $a and $b are
arrays, each member of $a is summed against the corresponding
member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional: Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="math.sum">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Math: Sum

Performs sum of $a and $b. A can be an array and $b a
number, in which case each member of $a gets summed with $b.
If $a is an array and $b is not provided then array_sum is
used to return a single numeric value. If both $a and $b are
arrays, each member of $a is summed against the corresponding
member in $b compared using index.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="a" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[First number for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fail" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, throws an Exception if argument "a" is not specified and no child content or inline argument is found. Usually okay to use a NULL value (as integer zero).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="b" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional: Second number or Iterator/Traversable/Array for calculation]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.audio">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a HTML5 audio player. NOTICE: This is
all HTML5 and won't work on browsers like IE8 and below. Include
some helper library like kolber.github.io/audiojs/ if you need to suport those.
Source can be a single file, a CSV of files or an array of arrays
with multiple sources for different audio formats. In the latter
case provide array keys 'src' and 'type'. Providing an array of
sources (even for a single source) is preferred as you can set
the correct mime type of the audio which is otherwise guessed
from the filename's extension.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contenteditable"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the contents of the element are editable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contextmenu" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The value of the id attribute on the menu with which to associate the element as a context menu.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="draggable" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element is draggable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dropzone" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="translate" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="spellcheck" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="hidden" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the element represents an element that is not yet, or is no longer, relevant.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the width of the audio player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the height of the audio player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio will start playing as soon as it is ready.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="controls" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that audio controls should be displayed (such as a play/pause button etc).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="loop" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio will start over again, every time it is finished.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="muted" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio output of the audio should be muted.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="poster" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies an image to be shown while the audio is downloading, or until the user hits the play button.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="preload" default="'auto'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies if and how the author thinks the audio should be loaded when the page loads. Can be "auto", "metadata" or "none".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="unsupported" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Add a message for old browsers like Internet Explorer 9 without audio support.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.audio">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a HTML5 audio player. NOTICE: This is
all HTML5 and won't work on browsers like IE8 and below. Include
some helper library like kolber.github.io/audiojs/ if you need to suport those.
Source can be a single file, a CSV of files or an array of arrays
with multiple sources for different audio formats. In the latter
case provide array keys 'src' and 'type'. Providing an array of
sources (even for a single source) is preferred as you can set
the correct mime type of the audio which is otherwise guessed
from the filename's extension.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contenteditable"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the contents of the element are editable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contextmenu" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The value of the id attribute on the menu with which to associate the element as a context menu.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="draggable" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element is draggable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dropzone" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="translate" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="spellcheck" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="hidden" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the element represents an element that is not yet, or is no longer, relevant.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the width of the audio player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the height of the audio player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio will start playing as soon as it is ready.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="controls" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that audio controls should be displayed (such as a play/pause button etc).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="loop" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio will start over again, every time it is finished.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="muted" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio output of the audio should be muted.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="poster" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies an image to be shown while the audio is downloading, or until the user hits the play button.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="preload" default="'auto'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies if and how the author thinks the audio should be loaded when the page loads. Can be "auto", "metadata" or "none".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="unsupported" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Add a message for old browsers like Internet Explorer 9 without audio support.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.audio">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a HTML5 audio player. NOTICE: This is
all HTML5 and won't work on browsers like IE8 and below. Include
some helper library like kolber.github.io/audiojs/ if you need to suport those.
Source can be a single file, a CSV of files or an array of arrays
with multiple sources for different audio formats. In the latter
case provide array keys 'src' and 'type'. Providing an array of
sources (even for a single source) is preferred as you can set
the correct mime type of the audio which is otherwise guessed
from the filename's extension.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contenteditable"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the contents of the element are editable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contextmenu" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The value of the id attribute on the menu with which to associate the element as a context menu.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="draggable" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element is draggable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dropzone" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="translate" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="spellcheck" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="hidden" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the element represents an element that is not yet, or is no longer, relevant.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the width of the audio player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the height of the audio player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio will start playing as soon as it is ready.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="controls" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that audio controls should be displayed (such as a play/pause button etc).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="loop" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio will start over again, every time it is finished.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="muted" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio output of the audio should be muted.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="poster" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies an image to be shown while the audio is downloading, or until the user hits the play button.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="preload" default="'auto'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies if and how the author thinks the audio should be loaded when the page loads. Can be "auto", "metadata" or "none".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="unsupported" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Add a message for old browsers like Internet Explorer 9 without audio support.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.audio">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a HTML5 audio player. NOTICE: This is
all HTML5 and won't work on browsers like IE8 and below. Include
some helper library like kolber.github.io/audiojs/ if you need to suport those.
Source can be a single file, a CSV of files or an array of arrays
with multiple sources for different audio formats. In the latter
case provide array keys 'src' and 'type'. Providing an array of
sources (even for a single source) is preferred as you can set
the correct mime type of the audio which is otherwise guessed
from the filename's extension.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contenteditable"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the contents of the element are editable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contextmenu" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The value of the id attribute on the menu with which to associate the element as a context menu.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="draggable" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element is draggable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dropzone" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="translate" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="spellcheck" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="hidden" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the element represents an element that is not yet, or is no longer, relevant.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the width of the audio player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the height of the audio player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio will start playing as soon as it is ready.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="controls" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that audio controls should be displayed (such as a play/pause button etc).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="loop" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio will start over again, every time it is finished.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="muted" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio output of the audio should be muted.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="poster" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies an image to be shown while the audio is downloading, or until the user hits the play button.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="preload" default="'auto'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies if and how the author thinks the audio should be loaded when the page loads. Can be "auto", "metadata" or "none".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="unsupported" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Add a message for old browsers like Internet Explorer 9 without audio support.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.exists">
<xsd:annotation>
<xsd:documentation>
<![CDATA[File/Directory Exists Condition ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="file" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Filename which must exist to trigger f:then rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="directory" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Directory which must exist to trigger f:then rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.exists">
<xsd:annotation>
<xsd:documentation>
<![CDATA[File/Directory Exists Condition ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="file" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Filename which must exist to trigger f:then rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="directory" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Directory which must exist to trigger f:then rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.extension">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the extension of the provided file]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="file" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the file to determine extension for.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.files">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns an array of files found in the provided path]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the folder containing the files to be listed.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="extensionList" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A comma seperated list of file extensions to pick up.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="prependPath"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to TRUE the path will be prepended to file names.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to "mtime" sorts files by modification time or alphabetically otherwise.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="excludePattern" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A comma seperated list of filenames to exclude, no wildcards.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders an image tag for the given resource including all valid
HTML5 attributes. Derivates of the original image are rendered
if the provided (optional) dimensions differ.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders an image tag for the given resource including all valid
HTML5 attributes. Derivates of the original image are rendered
if the provided (optional) dimensions differ.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders an image tag for the given resource including all valid
HTML5 attributes. Derivates of the original image are rendered
if the provided (optional) dimensions differ.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders an image tag for the given resource including all valid
HTML5 attributes. Derivates of the original image are rendered
if the provided (optional) dimensions differ.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.image.height">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the height of the provided image file in pixels]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="src" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to or id of the image file to determine info for.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a resource uid.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.image.height">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the height of the provided image file in pixels]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="src" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to or id of the image file to determine info for.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a resource uid.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.image.mimetype">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the mimetype of the provided image file]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="src" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to or id of the image file to determine info for.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a resource uid.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.image.mimetype">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the mimetype of the provided image file]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="src" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to or id of the image file to determine info for.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a resource uid.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.image.width">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the width of the provided image file in pixels]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="src" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to or id of the image file to determine info for.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a resource uid.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.image.width">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the width of the provided image file in pixels]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="src" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to or id of the image file to determine info for.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a resource uid.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the path argument is treated as a reference uid and will be resolved to a resource via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.pdfThumbnail">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Converts the provided PDF file into a PNG thumbnail and renders
the according image tag using Fluid's standard image ViewHelper
thus implementing its arguments. For PDF documents with multiple
pages the first page is rendered by default unless specified.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to PDF source file]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minWidth" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum width of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minHeight" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum height of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxWidth" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum width of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxHeight" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum height of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="density" default="100"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Canvas resolution for rendering the PDF in dpi (higher means better quality)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="background" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Fill background of resulting image with this color (for transparent source files)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="rotate" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of degress to rotate resulting image by (caution: very slow if not multiple of 90)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="page" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional page number to render as thumbnail for PDF documents with multiple pages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="forceOverwrite"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Forcibly overwrite existing converted PDF files]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.pdfThumbnail">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Converts the provided PDF file into a PNG thumbnail and renders
the according image tag using Fluid's standard image ViewHelper
thus implementing its arguments. For PDF documents with multiple
pages the first page is rendered by default unless specified.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to PDF source file]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minWidth" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum width of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minHeight" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum height of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxWidth" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum width of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxHeight" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum height of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="density" default="100"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Canvas resolution for rendering the PDF in dpi (higher means better quality)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="background" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Fill background of resulting image with this color (for transparent source files)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="rotate" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of degress to rotate resulting image by (caution: very slow if not multiple of 90)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="page" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional page number to render as thumbnail for PDF documents with multiple pages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="forceOverwrite"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Forcibly overwrite existing converted PDF files]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.pdfThumbnail">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Converts the provided PDF file into a PNG thumbnail and renders
the according image tag using Fluid's standard image ViewHelper
thus implementing its arguments. For PDF documents with multiple
pages the first page is rendered by default unless specified.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to PDF source file]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minWidth" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum width of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minHeight" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum height of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxWidth" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum width of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxHeight" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum height of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="density" default="100"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Canvas resolution for rendering the PDF in dpi (higher means better quality)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="background" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Fill background of resulting image with this color (for transparent source files)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="rotate" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of degress to rotate resulting image by (caution: very slow if not multiple of 90)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="page" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional page number to render as thumbnail for PDF documents with multiple pages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="forceOverwrite"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Forcibly overwrite existing converted PDF files]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.pdfThumbnail">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Converts the provided PDF file into a PNG thumbnail and renders
the according image tag using Fluid's standard image ViewHelper
thus implementing its arguments. For PDF documents with multiple
pages the first page is rendered by default unless specified.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to PDF source file]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minWidth" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum width of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minHeight" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum height of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxWidth" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum width of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxHeight" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum height of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="density" default="100"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Canvas resolution for rendering the PDF in dpi (higher means better quality)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="background" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Fill background of resulting image with this color (for transparent source files)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="rotate" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of degress to rotate resulting image by (caution: very slow if not multiple of 90)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="page" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional page number to render as thumbnail for PDF documents with multiple pages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="forceOverwrite"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Forcibly overwrite existing converted PDF files]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.pdfThumbnail">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Converts the provided PDF file into a PNG thumbnail and renders
the according image tag using Fluid's standard image ViewHelper
thus implementing its arguments. For PDF documents with multiple
pages the first page is rendered by default unless specified.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to PDF source file]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minWidth" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum width of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minHeight" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum height of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxWidth" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum width of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxHeight" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum height of resulting thumbnail image]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="density" default="100"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Canvas resolution for rendering the PDF in dpi (higher means better quality)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="background" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Fill background of resulting image with this color (for transparent source files)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="rotate" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of degress to rotate resulting image by (caution: very slow if not multiple of 90)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="page" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional page number to render as thumbnail for PDF documents with multiple pages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="forceOverwrite"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Forcibly overwrite existing converted PDF files]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.size">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the size of the provided file in bytes]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the file to determine size for.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.spotify">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a Spotify play button]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="spotifyUri" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Spotify URI to create the play button for. Right click any song, album or playlist in Spotify and select Copy Spotify URI.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="width" default="300"
php:type="int">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the play button in pixels. Defaults to 300]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="height" default="380"
php:type="int">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the play button in pixels. Defaults to 380]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="compact" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Whether to render the compact button with a fixed height of 80px.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="theme" default="'black'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Theme to use. Can be "black" or "white" and is not available in compact mode. Defaults to "black".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="view" default="'list'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[View to use. Can be "list" or "coverart" and is not available in compact mode. Defaults to "list".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.spotify">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a Spotify play button]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="spotifyUri" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Spotify URI to create the play button for. Right click any song, album or playlist in Spotify and select Copy Spotify URI.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="width" default="300"
php:type="int">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the play button in pixels. Defaults to 300]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="height" default="380"
php:type="int">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the play button in pixels. Defaults to 380]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="compact" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Whether to render the compact button with a fixed height of 80px.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="theme" default="'black'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Theme to use. Can be "black" or "white" and is not available in compact mode. Defaults to "black".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="view" default="'list'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[View to use. Can be "list" or "coverart" and is not available in compact mode. Defaults to "list".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.video">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a HTML5 video player. NOTICE: This is
all HTML5 and won't work on browsers like IE8 and below. Include
some helper library like videojs.com if you need to suport those.
Source can be a single file, a CSV of files or an array of arrays
with multiple sources for different video formats. In the latter
case provide array keys 'src' and 'type'. Providing an array of
sources (even for a single source) is preferred as you can set
the correct mime type of the video which is otherwise guessed
from the filename's extension.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contenteditable"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the contents of the element are editable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contextmenu" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The value of the id attribute on the menu with which to associate the element as a context menu.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="draggable" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element is draggable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dropzone" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="translate" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="spellcheck" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="hidden" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the element represents an element that is not yet, or is no longer, relevant.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the width of the video player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the height of the video player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the video will start playing as soon as it is ready.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="controls" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that video controls should be displayed (such as a play/pause button etc).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="loop" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the video will start over again, every time it is finished.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="muted" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio output of the video should be muted.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="poster" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies an image to be shown while the video is downloading, or until the user hits the play button.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="preload" default="'auto'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies if and how the author thinks the video should be loaded when the page loads. Can be "auto", "metadata" or "none".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="unsupported" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Add a message for old browsers like Internet Explorer 9 without video support.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.video">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a HTML5 video player. NOTICE: This is
all HTML5 and won't work on browsers like IE8 and below. Include
some helper library like videojs.com if you need to suport those.
Source can be a single file, a CSV of files or an array of arrays
with multiple sources for different video formats. In the latter
case provide array keys 'src' and 'type'. Providing an array of
sources (even for a single source) is preferred as you can set
the correct mime type of the video which is otherwise guessed
from the filename's extension.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contenteditable"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the contents of the element are editable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contextmenu" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The value of the id attribute on the menu with which to associate the element as a context menu.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="draggable" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element is draggable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dropzone" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="translate" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="spellcheck" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="hidden" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the element represents an element that is not yet, or is no longer, relevant.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the width of the video player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the height of the video player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the video will start playing as soon as it is ready.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="controls" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that video controls should be displayed (such as a play/pause button etc).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="loop" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the video will start over again, every time it is finished.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="muted" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio output of the video should be muted.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="poster" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies an image to be shown while the video is downloading, or until the user hits the play button.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="preload" default="'auto'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies if and how the author thinks the video should be loaded when the page loads. Can be "auto", "metadata" or "none".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="unsupported" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Add a message for old browsers like Internet Explorer 9 without video support.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.video">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a HTML5 video player. NOTICE: This is
all HTML5 and won't work on browsers like IE8 and below. Include
some helper library like videojs.com if you need to suport those.
Source can be a single file, a CSV of files or an array of arrays
with multiple sources for different video formats. In the latter
case provide array keys 'src' and 'type'. Providing an array of
sources (even for a single source) is preferred as you can set
the correct mime type of the video which is otherwise guessed
from the filename's extension.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contenteditable"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the contents of the element are editable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contextmenu" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The value of the id attribute on the menu with which to associate the element as a context menu.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="draggable" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element is draggable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dropzone" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="translate" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="spellcheck" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="hidden" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the element represents an element that is not yet, or is no longer, relevant.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the width of the video player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the height of the video player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the video will start playing as soon as it is ready.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="controls" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that video controls should be displayed (such as a play/pause button etc).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="loop" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the video will start over again, every time it is finished.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="muted" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio output of the video should be muted.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="poster" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies an image to be shown while the video is downloading, or until the user hits the play button.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="preload" default="'auto'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies if and how the author thinks the video should be loaded when the page loads. Can be "auto", "metadata" or "none".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="unsupported" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Add a message for old browsers like Internet Explorer 9 without video support.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.video">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a HTML5 video player. NOTICE: This is
all HTML5 and won't work on browsers like IE8 and below. Include
some helper library like videojs.com if you need to suport those.
Source can be a single file, a CSV of files or an array of arrays
with multiple sources for different video formats. In the latter
case provide array keys 'src' and 'type'. Providing an array of
sources (even for a single source) is preferred as you can set
the correct mime type of the video which is otherwise guessed
from the filename's extension.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contenteditable"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the contents of the element are editable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="contextmenu" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The value of the id attribute on the menu with which to associate the element as a context menu.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="draggable" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element is draggable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dropzone" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies what types of content can be dropped on the element, and instructs the UA about which actions to take with content when it is dropped on the element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="translate" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether an elements attribute values and contents of its children are to be translated when the page is localized, or whether to leave them unchanged.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="spellcheck" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies whether the element represents an element whose contents are subject to spell checking and grammar checking.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="hidden" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the element represents an element that is not yet, or is no longer, relevant.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the width of the video player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the height of the video player in pixels.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the video will start playing as soon as it is ready.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="controls" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that video controls should be displayed (such as a play/pause button etc).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="loop" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the video will start over again, every time it is finished.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="muted" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that the audio output of the video should be muted.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="poster" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies an image to be shown while the video is downloading, or until the user hits the play button.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="preload" default="'auto'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies if and how the author thinks the video should be loaded when the page loads. Can be "auto", "metadata" or "none".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="unsupported" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Add a message for old browsers like Internet Explorer 9 without video support.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.vimeo">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a video from Vimeo]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="videoId" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Vimeo ID of the video to embed.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="640"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the video in pixels. Defaults to 640 for 16:9 content.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="360"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the video in pixels. Defaults to 360 for 16:9 content.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="title" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Show the title on the video. Defaults to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="byline" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Show the users byline on the video. Defaults to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="portrait" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Show the users portrait on the video. Defaults to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="color" default="'00adef'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specify the color of the video controls. Defaults to 00adef. Make sure that you dont include the #.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Play the video automatically on load. Defaults to FALSE. Note that this wont work on some devices.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="loop" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Play the video again when it reaches the end. Defaults to FALSE.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="api" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Set to TRUE to enable the Javascript API.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="playerId" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An unique id for the player that will be passed back with all Javascript API responses.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.vimeo">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a video from Vimeo]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="videoId" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Vimeo ID of the video to embed.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="640"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the video in pixels. Defaults to 640 for 16:9 content.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="360"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the video in pixels. Defaults to 360 for 16:9 content.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="title" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Show the title on the video. Defaults to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="byline" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Show the users byline on the video. Defaults to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="portrait" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Show the users portrait on the video. Defaults to TRUE.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="color" default="'00adef'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specify the color of the video controls. Defaults to 00adef. Make sure that you dont include the #.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Play the video automatically on load. Defaults to FALSE. Note that this wont work on some devices.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="loop" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Play the video again when it reaches the end. Defaults to FALSE.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="api" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Set to TRUE to enable the Javascript API.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="playerId" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An unique id for the player that will be passed back with all Javascript API responses.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.youtube">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a video from YouTube]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="videoId" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[YouTube id of the video to embed.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="640"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the video in pixels. Defaults to 640 for 16:9 content.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="385"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the video in pixels. Defaults to 385 for 16:9 content.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Play the video automatically on load. Defaults to FALSE.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="legacyCode" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Whether to use the legacy flash video code.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showRelated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Whether to show related videos after playing.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="extendedPrivacy"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Whether to use cookie-less video player.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="media.youtube">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Renders HTML code to embed a video from YouTube]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="videoId" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[YouTube id of the video to embed.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="width" default="640"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the video in pixels. Defaults to 640 for 16:9 content.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="height" default="385"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the video in pixels. Defaults to 385 for 16:9 content.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="autoplay" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Play the video automatically on load. Defaults to FALSE.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="legacyCode" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Whether to use the legacy flash video code.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showRelated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Whether to show related videos after playing.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="extendedPrivacy"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Whether to use cookie-less video player.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.cookie">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Cookie

Displays nested content or "then" child once, then sets a
cookie with $ttl, optionally locked to domain name, which
makes the condition return FALSE as long as the cookie exists.

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.cookie">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Cookie

Displays nested content or "then" child once, then sets a
cookie with $ttl, optionally locked to domain name, which
makes the condition return FALSE as long as the cookie exists.

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.cookie">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Cookie

Displays nested content or "then" child once, then sets a
cookie with $ttl, optionally locked to domain name, which
makes the condition return FALSE as long as the cookie exists.

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.instance">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Instance

Displays nested content or "then" child once per instance
of the content element or plugin being rendered, as identified
by the contentObject UID (or globally if no contentObject
is associated).

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.instance">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Instance

Displays nested content or "then" child once per instance
of the content element or plugin being rendered, as identified
by the contentObject UID (or globally if no contentObject
is associated).

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.instance">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Instance

Displays nested content or "then" child once per instance
of the content element or plugin being rendered, as identified
by the contentObject UID (or globally if no contentObject
is associated).

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.session">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Session

Displays nested content or "then" child once per session.

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.session">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Session

Displays nested content or "then" child once per session.

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.session">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Session

Displays nested content or "then" child once per session.

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.standard">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Standard

Displays nested content or "then" child once per rendering
stack - i.e. per Layout, or Template if no Layout is used.

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.standard">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Standard

Displays nested content or "then" child once per rendering
stack - i.e. per Layout, or Template if no Layout is used.

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="once.standard">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Once: Standard

Displays nested content or "then" child once per rendering
stack - i.e. per Layout, or Template if no Layout is used.

"Once"-style ViewHelpers are purposed to only display their
nested content once per XYZ, where the XYZ depends on the
specific type of ViewHelper (session, cookie etc).

In addition the ViewHelper is a ConditionViewHelper, which
means you can utilize the f:then and f:else child nodes as
well as the "then" and "else" arguments.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="identifier" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identity of this condition - if used in other places, the condition applies to the same identity in the storage (i.e. cookie name or session key)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="lockToDomain"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, locks this condition to a specific domain, i.e. the storage of $identity is associated with a domain. If same identity is also used without domain lock, it matches any domain locked condition]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="ttl" default="86400"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Time-to-live for skip registration, number of seconds. After this expires the registration is unset]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="or">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If content is empty use alternative text (can also be LLL:labelname shortcut or LLL:EXT: file paths).]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:anySimpleType" name="content"
default="NULL" php:type="$content">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="alternative" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Alternative if content is empty, can use LLL: shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="arguments" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Arguments to be replaced in the resulting string]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[UpperCamelCase extension name without vendor prefix]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.absoluteUrl">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns a full, absolute URL to this page with all arguments]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.breadCrumb">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to make a breadcrumb link set from a pageUid, automatic or manual]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'breadcrumb'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="endLevel" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional deepest level of rendering. If left out all levels up to the current are rendered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.breadCrumb">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to make a breadcrumb link set from a pageUid, automatic or manual]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'breadcrumb'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="endLevel" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional deepest level of rendering. If left out all levels up to the current are rendered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.breadCrumb">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to make a breadcrumb link set from a pageUid, automatic or manual]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'breadcrumb'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="endLevel" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional deepest level of rendering. If left out all levels up to the current are rendered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.footer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to place header blocks in document footer]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.footer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to place header blocks in document footer]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.header">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to place header blocks in document header]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.header">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to place header blocks in document header]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content to insert in header/footer]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If not using tag content, specify path to file here]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="external" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and standalone, includes the file as raw URL. If TRUE and not standalone then downloads the file and merges it when building Assets]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of the content. If multiple occurrences of the same name happens, behavior is defined by argument "overwrite"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="overwrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE and a relocated string with "name" already exists, does not overwrite the existing relocated string. Default behavior is to overwrite.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dependencies" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of other named assets upon which this asset depends. When included, this asset will always load after its dependencies]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="group" default="'fluid'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional name of a logical group (created dynamically just by using the name) to which this particular asset belongs.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="debug" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, outputs information about this ViewHelper when the tag is used. Two master debug switches exist in TypoScript; see documentation about Page / Asset ViewHelper]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="standalone" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, excludes this Asset from any concatenation which may be applied]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="rewrite" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, this Asset will be included as is without any processing of contained urls]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="fluid" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, renders this (standalone or external) Asset as if it were a Fluid template, passing along values of the "arguments" attribute or every available template variable if "arguments" not specified]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="variables" default="false"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional array of arguments which you use inside the Asset, be it standalon or inline. Use this argument to ensure your Asset filenames are only reused when all variables used in the Asset are the same]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="allowMoveToFooter"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows this Asset to be included in the document footer rather than the header. Should never be allowed for CSS.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="trim" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED. Trim is no longer supported. Setting this to TRUE doesn't do anything.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="namedChunks"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, hides the comment containing the name of each of Assets which is merged in a merged file. Disable to avoid a bit more output at the cost of transparency]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.header.alternate">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the all alternate urls.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="languages" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The languages (either CSV, array or implementing Traversable)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The page uid to check]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="normalWhenNoLanguage"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, a missing page overlay should be ignored]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.header.canonical">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the current canonical url in a link tag.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The page uid to check]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="normalWhenNoLanguage"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, a missing page overlay should be ignored]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.header.canonical">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the current canonical url in a link tag.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The page uid to check]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="normalWhenNoLanguage"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, a missing page overlay should be ignored]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.header.link">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to render a meta tag]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rel" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: rel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="href" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: href]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="type" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: type]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: lang]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: dir]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.header.link">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to render a meta tag]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rel" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: rel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="href" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: href]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="type" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: type]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: lang]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: dir]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.header.meta">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to render a meta tag

If you use the ViewHelper in a plugin it has to be USER
not USER_INT, what means it has to be cached!]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name property of meta tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content of meta tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="http-equiv" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: http-equiv]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="scheme" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: scheme]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: lang]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: dir]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.header.meta">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to render a meta tag

If you use the ViewHelper in a plugin it has to be USER
not USER_INT, what means it has to be cached!]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name property of meta tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Content of meta tag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="http-equiv" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: http-equiv]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="scheme" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: scheme]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: lang]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Property: dir]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.header.title">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### ViewHelper used to override page title

This ViewHelper uses the TYPO3 PageRenderer to set the
page title - with everything this implies regarding
support for TypoScript settings.

Specifically you should note the setting `config.noPageTitle`
which must be set to either 1 (one) in case no other source
defines the page title (it's likely that at least one does),
or 2 (two) to indicate that the TS-controlled page title
must be disabled. A value of 2 (two) ensures that the title
used in this ViewHelper will be used in the rendered page.

If you use the ViewHelper in a plugin it has to be USER
not USER_INT, what means it has to be cached!

#### Why can I not forcibly override the title?

This has been opted out with full intention. The reasoning
behind not allowing a Fluid template to forcibly override the
page title that may be set through TypoScript is that many
other extensions (mainly SEO-focused ones) will be setting
and manipulating the page title - and if overridden in a
template file using a ViewHelper, it would be almost impossible
to detect unless you already know exactly where to look.
Enforcing use of the core behavior is the only way to ensure
that this ViewHelper can coexist with other extensions in
a fully controllable way.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Title tag content]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="whitespaceString"
default="' '" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[String used to replace groups of white space characters, one replacement inserted per group]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="setIndexedDocTitle"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Set indexed doc title to title]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.info">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to access data of the current page record]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, this UID will be used to fetch page data instead of using the current page.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, only this field will be returned/assigned instead of the complete page record.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.languageMenu">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper for rendering TYPO3 menus in Fluid
Require the extension static_info_table]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclosing container, list and flags (not finished) only]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links, list and flags only]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="defaultIsoFlag"
default="'gb'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ISO code of the default flag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="defaultLanguageLabel"
default="'English'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the default language]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="order" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Orders the languageIds after this list]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="labelOverwrite" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Overrides language labels]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideNotTranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Hides languageIDs which are not translated]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="layout"
default="'flag,name'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[How to render links when using autorendering. Possible selections: name,flag - use fx "name" or "flag,name" or "name,flag"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useCHash" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Use cHash for typolink]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="flagPath"
default="'typo3/sysext/t3skin/images/flags/'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Overwrites the path to the flag folder]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="flagImageType"
default="'png'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets type of flag image: png, gif, jpeg]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets flag to link current language or not]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the class, by which the current language will be marked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'languageMenu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional page uid to use.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="configuration"
default="array ( )" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional typoLink configuration]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="excludeQueryVars"
default="''" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Comma-separate list of variables to exclude]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.languageMenu">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper for rendering TYPO3 menus in Fluid
Require the extension static_info_table]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclosing container, list and flags (not finished) only]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links, list and flags only]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="defaultIsoFlag"
default="'gb'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ISO code of the default flag]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="defaultLanguageLabel"
default="'English'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the default language]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="order" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Orders the languageIds after this list]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="labelOverwrite" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Overrides language labels]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideNotTranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Hides languageIDs which are not translated]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="layout"
default="'flag,name'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[How to render links when using autorendering. Possible selections: name,flag - use fx "name" or "flag,name" or "name,flag"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useCHash" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Use cHash for typolink]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="flagPath"
default="'typo3/sysext/t3skin/images/flags/'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Overwrites the path to the flag folder]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="flagImageType"
default="'png'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets type of flag image: png, gif, jpeg]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets flag to link current language or not]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Sets the class, by which the current language will be marked]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'languageMenu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional page uid to use.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="configuration"
default="array ( )" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional typoLink configuration]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="excludeQueryVars"
default="''" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Comma-separate list of variables to exclude]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.language">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Returns the current language from languages depending on l18n settings.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="languages" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The languages (either CSV, array or implementing Traversable)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The page uid to check]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="normalWhenNoLanguage"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, a missing page overlay should be ignored]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.link">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Link ViewHelper

Viewhelper for rendering page links

This viewhelper behaves identically to Fluid's link viewhelper
except for it fetches the title of the provided page UID and inserts
it as linktext if that is omitted. The link will not render at all
if the requested page is not translated in the current language.

Automatic linktext: <v:page.link pageUid="UID" />
Manual linktext:    <v:page.link pageUid="UID">linktext</v:page.link>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="target" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Target of link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rel" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the relationship between the current document and the linked document]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[UID of the page to create the link and fetch the title for.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="additionalParams"
default="array ( )" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Query parameters to be attached to the resulting URI]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageType" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Type of the target page. See typolink.parameter]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="noCache" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE disables caching for the target page. You should not need this.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="noCacheHash"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE supresses the cHash query parameter created by TypoLink. You should not need this.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="section" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The anchor to be added to the URI]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkAccessRestrictedPages"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE, links pointing to access restricted pages will still linkto the page even though the page cannot be accessed.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="absolute" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE, the URI of the rendered link is absolute]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="addQueryString"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE, the current query parameters will be kept in the URI]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array"
name="argumentsToBeExcludedFromQueryString" default="array ( )"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Arguments to be removed from the URI. Only active if $addQueryString = TRUE]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change tofor example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolvedAFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="pageTitleAs" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When rendering child content, supplies page title as variable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.link">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Link ViewHelper

Viewhelper for rendering page links

This viewhelper behaves identically to Fluid's link viewhelper
except for it fetches the title of the provided page UID and inserts
it as linktext if that is omitted. The link will not render at all
if the requested page is not translated in the current language.

Automatic linktext: <v:page.link pageUid="UID" />
Manual linktext:    <v:page.link pageUid="UID">linktext</v:page.link>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="target" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Target of link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rel" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the relationship between the current document and the linked document]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[UID of the page to create the link and fetch the title for.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="additionalParams"
default="array ( )" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Query parameters to be attached to the resulting URI]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageType" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Type of the target page. See typolink.parameter]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="noCache" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE disables caching for the target page. You should not need this.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="noCacheHash"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE supresses the cHash query parameter created by TypoLink. You should not need this.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="section" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The anchor to be added to the URI]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkAccessRestrictedPages"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE, links pointing to access restricted pages will still linkto the page even though the page cannot be accessed.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="absolute" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE, the URI of the rendered link is absolute]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="addQueryString"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE, the current query parameters will be kept in the URI]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array"
name="argumentsToBeExcludedFromQueryString" default="array ( )"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Arguments to be removed from the URI. Only active if $addQueryString = TRUE]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change tofor example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolvedAFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="pageTitleAs" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When rendering child content, supplies page title as variable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Menu ViewHelper

ViewHelper for rendering TYPO3 menus in Fluid

Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Menu ViewHelper

ViewHelper for rendering TYPO3 menus in Fluid

Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Menu ViewHelper

ViewHelper for rendering TYPO3 menus in Fluid

Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parent page UID to use as top level of menu. If left out will be detected from rootLine using $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.browse">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Browse Menu ViewHelper

ViewHelper for rendering TYPO3 browse menus in Fluid

Renders links to browse inside a menu branch including
first, previous, next, last and up to the parent page.
Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelFirst"
default="'first'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "first" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelLast" default="'last'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "last" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelPrevious"
default="'previous'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "previous" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelNext" default="'next'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "next" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelUp" default="'up'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "up" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="renderFirst" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE the "first" link will not be rendered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="renderLast" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE the "last" link will not be rendered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="renderUp" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE the "up" link will not be rendered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="usePageTitles"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to TRUE, uses target page titles instead of "next", "previous" etc. labels]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parent page UID to use as top level of menu. If unspecified, current page UID is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="currentPageUid"
default="NULL" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional page UID to use as current page. If unspecified, current page UID from globals is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.browse">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Browse Menu ViewHelper

ViewHelper for rendering TYPO3 browse menus in Fluid

Renders links to browse inside a menu branch including
first, previous, next, last and up to the parent page.
Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelFirst"
default="'first'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "first" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelLast" default="'last'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "last" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelPrevious"
default="'previous'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "previous" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelNext" default="'next'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "next" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelUp" default="'up'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "up" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="renderFirst" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE the "first" link will not be rendered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="renderLast" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE the "last" link will not be rendered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="renderUp" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE the "up" link will not be rendered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="usePageTitles"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to TRUE, uses target page titles instead of "next", "previous" etc. labels]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parent page UID to use as top level of menu. If unspecified, current page UID is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="currentPageUid"
default="NULL" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional page UID to use as current page. If unspecified, current page UID from globals is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.browse">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Browse Menu ViewHelper

ViewHelper for rendering TYPO3 browse menus in Fluid

Renders links to browse inside a menu branch including
first, previous, next, last and up to the parent page.
Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelFirst"
default="'first'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "first" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelLast" default="'last'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "last" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelPrevious"
default="'previous'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "previous" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelNext" default="'next'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "next" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="labelUp" default="'up'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Label for the "up" link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="renderFirst" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE the "first" link will not be rendered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="renderLast" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE the "last" link will not be rendered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="renderUp" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to FALSE the "up" link will not be rendered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="usePageTitles"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set to TRUE, uses target page titles instead of "next", "previous" etc. labels]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parent page UID to use as top level of menu. If unspecified, current page UID is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="currentPageUid"
default="NULL" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional page UID to use as current page. If unspecified, current page UID from globals is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.deferred">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Deferred menu rendering ViewHelper

Place this ViewHelper inside any other ViewHelper which
has been configured with the `deferred` attribute set to
TRUE - this will cause the output of the parent to only
contain the content of this ViewHelper.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.deferred">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Deferred menu rendering ViewHelper

Place this ViewHelper inside any other ViewHelper which
has been configured with the `deferred` attribute set to
TRUE - this will cause the output of the parent to only
contain the content of this ViewHelper.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.deferred">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Deferred menu rendering ViewHelper

Place this ViewHelper inside any other ViewHelper which
has been configured with the `deferred` attribute set to
TRUE - this will cause the output of the parent to only
contain the content of this ViewHelper.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.directory">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Directory Menu ViewHelper

ViewHelper for rendering TYPO3 list menus in Fluid

Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="pages" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Parent page UIDs of subpages to include in the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.directory">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Directory Menu ViewHelper

ViewHelper for rendering TYPO3 list menus in Fluid

Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="pages" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Parent page UIDs of subpages to include in the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.directory">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Directory Menu ViewHelper

ViewHelper for rendering TYPO3 list menus in Fluid

Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="pages" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Parent page UIDs of subpages to include in the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.list">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: List Menu ViewHelper

ViewHelper for rendering TYPO3 list menus in Fluid

Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="pages" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to include in the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.list">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: List Menu ViewHelper

ViewHelper for rendering TYPO3 list menus in Fluid

Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="pages" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to include in the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.list">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: List Menu ViewHelper

ViewHelper for rendering TYPO3 list menus in Fluid

Supports both automatic, tag-based rendering (which
defaults to `ul > li` with options to set both the
parent and child tag names. When using manual rendering
a range of support CSS classes are available along
with each page record.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagName" default="'ul'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for enclsing container]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="tagNameChildren"
default="'li'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name to use for child nodes surrounding links. If set to "a" enables non-wrapping mode.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="entryLevel" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional entryLevel TS equivalent of the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="levels" default="1"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Number of levels to render - setting this to a number higher than 1 (one) will expand menu items that are active, to a depth of $levels starting from $entryLevel]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="divider" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional divider to insert between each menu item. Note that this does not mix well with automatic rendering due to the use of an ul > li structure]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="expandAll" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE and $levels > 1 then expands all (not just the active) menu items which have submenus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classActive"
default="'active'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to active links]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classCurrent"
default="'current'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classHasSubpages"
default="'sub'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name to add to links which have subpages]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, substitutes the link UID of a shortcut with the target page UID (and thus avoiding redirects) but does not change other data - which is done by using useShortcutData.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutTarget"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional param for using shortcut target instead of shortcut itself for current link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useShortcutData"
default="NULL" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Shortcut to set useShortcutTarget and useShortcutData simultaneously]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classFirst" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the first menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="classLast" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional class name for the last menu elment]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="substElementUid"
default="''" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional parameter for wrapping the link with the uid of the page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeSpacers"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Wether or not to include menu spacers in the page select query]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="resolveExclude"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Exclude link if realurl/cooluri flag tx_realurl_exclude is set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHidden" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[DEPRECATED - IGNORED. FIELD IS AN ENABLE-FIELD WHICH MUST BE RESPECTED. Include disabled pages into the menu]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showHiddenInMenu"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Include pages that are set to be hidden in menus]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="showCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not display the current page]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkCurrent" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap the current page in a link]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="linkActive" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, does not wrap with links the titles of pages that are active in the rootline]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="titleFields"
default="'nav_title,title'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list of fields to use as link label - default is "nav_title,title", change to for example "tx_myext_somefield,subtitle,nav_title,title". The first field that contains text will be used. Field value resolved AFTER page field overlays.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="doktypes" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of allowed doktypes from constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludeSubpageTypes"
default="'SYSFOLDER'" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSV list or array of doktypes to not consider as subpages. Can be constant names or integer values, i.e. 1,254 or DEFAULT,SYSFOLDER,SHORTCUT or just default,sysfolder,shortcut]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="deferred" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, does not output the tag content UNLESS a v:page.menu.deferred child ViewHelper is both used and triggered. This allows you to create advanced conditions while still using automatic rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="'menu'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu pages as an array in a variable named after this value and renders the tag content. If the tag content is empty automatic rendering is triggered.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="rootLineAs"
default="'rootLine'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, stores the menu root line as an array in a variable named according to this value and renders the tag content - which means automatic rendering is disabled if this attribute is used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="excludePages" default="''"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to exclude from the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="includeAnchorTitle"
default="true" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, includes the page title as title attribute on the anchor.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="pages" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UIDs to include in the menu. Can be CSV, array or an object implementing Traversable.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.sub">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Auto Sub Menu ViewHelper

Recycles the parent menu ViewHelper instance, resetting the
page UID used as starting point and repeating rendering of
the exact same tag content.

Used in custom menu rendering to indicate where a submenu is
to be rendered; accepts only a single argument called `pageUid`
which defines the new starting page UID that is used in the
recycled parent menu instance.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="pageUid" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UID to be overridden in the recycled rendering of the parent instance, if one exists]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.sub">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Auto Sub Menu ViewHelper

Recycles the parent menu ViewHelper instance, resetting the
page UID used as starting point and repeating rendering of
the exact same tag content.

Used in custom menu rendering to indicate where a submenu is
to be rendered; accepts only a single argument called `pageUid`
which defines the new starting page UID that is used in the
recycled parent menu instance.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="pageUid" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UID to be overridden in the recycled rendering of the parent instance, if one exists]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.menu.sub">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Auto Sub Menu ViewHelper

Recycles the parent menu ViewHelper instance, resetting the
page UID used as starting point and repeating rendering of
the exact same tag content.

Used in custom menu rendering to indicate where a submenu is
to be rendered; accepts only a single argument called `pageUid`
which defines the new starting page UID that is used in the
recycled parent menu instance.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="pageUid" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Page UID to be overridden in the recycled rendering of the parent instance, if one exists]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.resources">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table" default="'pages'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'media'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.resources">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table" default="'pages'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'media'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.resources">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table" default="'pages'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'media'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.resources.fal">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table" default="'pages'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'media'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.resources.fal">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table" default="'pages'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'media'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.resources.fal">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table" default="'pages'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="'media'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.rootline">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to get the rootline of a page]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional page uid to use.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="page.staticPrefix">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Page: Static Prefix

Use this ViewHelper to read the contents of the `plugin.tx_vhs.settings.prependPath`
TypoScript location - this setting stores the static prefix which gets added to all
relative resource URIs generated by VHS; whenever you require a ViewHelper which
does not respect this setting you can use this ViewHelper to prepend that setting
after the value is returned from the other ViewHelper.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="random.number">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Random: Number Generator

Generates a random number. The default minimum number is
set to 100000 in order to generate a longer integer string
representation. Decimal values can be generated as well.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="minimum" default="100000"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum number - defaults to 100000 (max is 999999 making lengths uniform with adequate entropy)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maximum" default="999999"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum number - defaults to 999999 (min is 100000 making lengths uniform with adequate entropy)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minimumDecimals"
default="0" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum number of also randomized decimal digits to add to number]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maximumDecimals"
default="0" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum number of also randomized decimal digits to add to number]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="random.string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Random: String Generator

Use either `minimumLength` / `maximumLength` or just `length`.

Specify the characters which can be randomized using `characters`.

Has built-in insurance that first character of random string is
an alphabetic character (allowing safe use as DOM id for example).]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:integer" name="length" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minimumLength" default="32"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maximumLength" default="32"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="characters"
default="'0123456789abcdef'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.ascii">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Render: ASCII Character

Renders a single character identified by its charset number.

For example: `<v:render.character ascii="10" /> renders a UNIX linebreak
as does {v:render.character(ascii: 10)}. Can be used in combination with
`v:iterator.loop` to render sequences or repeat the same character:

    {v:render.ascii(ascii: 10) -> v:iterator.loop(count: 5)}

And naturally you can feed any integer variable or ViewHelper return value
into the `ascii` parameter throught `renderChildren` to allow chaining:

    {variableWithAsciiInteger -> v:render.ascii()}

And arrays are also supported - they will produce a string of characters
from each number in the array:

    {v:render.ascii(ascii: {0: 13, 1: 10})}

Will produce a Windows line break, \r\n]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="ascii" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.cache">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Cache Rendering ViewHelper

Caches the child content (any type supported as long as it
can be serialized). Because of the added overhead you should
only use this if what you are caching is complex enough that
it performs many DB request (for example when displaying an
object with many lazy properties which don't load until the
template asks for the property value). In short, applies to
just about the same use cases as any other cache - but remember
that Fluid is already a very efficient rendering engine so don't
just assume that using the ViewHelper will increase performance
or decrease memory usage.

Works forcibly, i.e. can only re-render its content if the
cache is cleared. A CTRL+Refresh in the browser does nothing,
even if a BE user is logged in. Only use this ViewHelper around
content which you are absolutely sure it makes sense to cache
along with an identity - for example, if rendering an uncached
plugin which contains a Partial template that is in all aspects
just a solid-state HTML representation of something like a list
of current news.

The cache behind this ViewHelper is the Extbase object cache,
which is cleared when you clear the page content cache.

Do not use on form elements, it will invalidate the checksum.

Do not use around ViewHelpers which add header data or which
interact with the PageRenderer or other "live" objects; this
includes many of the VHS ViewHelpers!]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="identity" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identifier for the cached content (usage preferred)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="content" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be cached]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onError" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="graceful" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If forced to FALSE, errors are not caught but rather "transmitted" as every other error would be]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.cache">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Cache Rendering ViewHelper

Caches the child content (any type supported as long as it
can be serialized). Because of the added overhead you should
only use this if what you are caching is complex enough that
it performs many DB request (for example when displaying an
object with many lazy properties which don't load until the
template asks for the property value). In short, applies to
just about the same use cases as any other cache - but remember
that Fluid is already a very efficient rendering engine so don't
just assume that using the ViewHelper will increase performance
or decrease memory usage.

Works forcibly, i.e. can only re-render its content if the
cache is cleared. A CTRL+Refresh in the browser does nothing,
even if a BE user is logged in. Only use this ViewHelper around
content which you are absolutely sure it makes sense to cache
along with an identity - for example, if rendering an uncached
plugin which contains a Partial template that is in all aspects
just a solid-state HTML representation of something like a list
of current news.

The cache behind this ViewHelper is the Extbase object cache,
which is cleared when you clear the page content cache.

Do not use on form elements, it will invalidate the checksum.

Do not use around ViewHelpers which add header data or which
interact with the PageRenderer or other "live" objects; this
includes many of the VHS ViewHelpers!]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="identity" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Identifier for the cached content (usage preferred)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="content" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be cached]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onError" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="graceful" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If forced to FALSE, errors are not caught but rather "transmitted" as every other error would be]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.inline">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Render: Inline

Render as string containing Fluid as if it were
part of the template currently being rendered.

Environment (template variables etc.) is cloned
but not re-merged after rendering, which means that
any and all changes in variables that happen while
rendering this inline code will be destroyed after
sub-rendering is finished.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onError" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="graceful" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If forced to FALSE, errors are not caught but rather "transmitted" as every other error would be]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="namespaces"
default="array ( )" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional additional/overridden namespaces, array("ns" => "Tx_MyExt_ViewHelpers")]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.inline">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Render: Inline

Render as string containing Fluid as if it were
part of the template currently being rendered.

Environment (template variables etc.) is cloned
but not re-merged after rendering, which means that
any and all changes in variables that happen while
rendering this inline code will be destroyed after
sub-rendering is finished.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="content" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onError" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="graceful" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If forced to FALSE, errors are not caught but rather "transmitted" as every other error would be]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="namespaces"
default="array ( )" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional additional/overridden namespaces, array("ns" => "Tx_MyExt_ViewHelpers")]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.record">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to render raw content records typically fetched
with <v:content.get(column: '0', render: FALSE) />]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="record" default="array ( )"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="column" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the column to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="limit" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional limit to the number of content elements to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'sorting'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort field of content elements - RAND() supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortDirection"
default="'ASC'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort direction of content elements]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set, selects only content from this page UID]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="contentUids" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, replaces all conditions with an "uid IN (1,2,3)" style condition using the UID values from this array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sectionIndexOnly"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, only renders/gets content that is marked as "include in section index"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slide" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Enables Content Sliding - amount of levels which shall get walked up the rootline. For infinite sliding (till the rootpage) set to -1)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slideCollect" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="slideCollectReverse"
default="0" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Normally when collecting content elements the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="loadRegister" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[List of LOAD_REGISTER variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="render" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional returning variable as original table rows]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideUntranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.record">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper used to render raw content records typically fetched
with <v:content.get(column: '0', render: FALSE) />]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="record" default="array ( )"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="column" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the column to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="limit" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional limit to the number of content elements to render]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="order" default="'sorting'"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort field of content elements - RAND() supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="sortDirection"
default="'ASC'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional sort direction of content elements]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If set, selects only content from this page UID]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="contentUids" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If used, replaces all conditions with an "uid IN (1,2,3)" style condition using the UID values from this array]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="sectionIndexOnly"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, only renders/gets content that is marked as "include in section index"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slide" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Enables Content Sliding - amount of levels which shall get walked up the rootline. For infinite sliding (till the rootpage) set to -1)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="slideCollect" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, content is collected up the root line. If FALSE, only the first PID which has content is used. If greater than zero, this value overrides $slide]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="slideCollectReverse"
default="0" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Normally when collecting content elements the elements from the actual page get shown on the top and those from the parent pages below those. You can invert this behaviour (actual page elements at bottom) by setting this flag))]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="loadRegister" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[List of LOAD_REGISTER variable]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="render" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional returning variable as original table rows]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideUntranslated"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE, will NOT include elements which have NOT been translated, if current language is NOT the default language. Default is to show untranslated elements but never display the original if there is a translated version]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.request">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Render: Request

Renders a sub-request to the desired Extension, Plugin,
Controller and action with the desired arguments.

Note: arguments must not be wrapped with the prefix used
in GET/POST parameters but must be provided as if the
arguments were sent directly to the Controller action.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:anySimpleType" name="action"
default="NULL" php:type="string|NULL">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="controller"
default="NULL" php:type="string|NULL">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="extensionName"
default="NULL" php:type="string|NULL">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="pluginName"
default="NULL" php:type="string|NULL">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="vendorName"
default="NULL" php:type="string|NULL">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="arguments"
default="array ( )" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onError" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="graceful" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If forced to FALSE, errors are not caught but rather "transmitted" as every other error would be]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.request">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Render: Request

Renders a sub-request to the desired Extension, Plugin,
Controller and action with the desired arguments.

Note: arguments must not be wrapped with the prefix used
in GET/POST parameters but must be provided as if the
arguments were sent directly to the Controller action.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:anySimpleType" name="action"
default="NULL" php:type="string|NULL">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="controller"
default="NULL" php:type="string|NULL">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="extensionName"
default="NULL" php:type="string|NULL">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="pluginName"
default="NULL" php:type="string|NULL">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="vendorName"
default="NULL" php:type="string|NULL">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="arguments"
default="array ( )" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="pageUid" default="0"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onError" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="graceful" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If forced to FALSE, errors are not caught but rather "transmitted" as every other error would be]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.template">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Render: Template

Render a template file (with arguments if desired).

Supports passing variables and controlling the format,
paths can be overridden and uses the same format as TS
settings a' la plugin.tx_myext.view, which means that
this can be done (from any extension, not just "foo")

    <v:render.template
            file="EXT:foo/Resources/Private/Templates/Action/Show.html"
     variables="{object: customLoadedObject}"
     paths="{v:variable.typoscript(path: 'plugin.tx_foo.view')}"
     format="xml" />

Which would render the "show" action's template from
EXT:foo using paths define in that extension's typoscript
but using a custom loaded object when rendering the template
rather than the object defined by the "Action" controller
of EXT:foo. The output would be in XML format and this
format would also be respected by Layouts and Partials
which are rendered from the Show.html template.

As such this is very similar to Render/RequestViewHelper
with two major differences:

1. A true ControllerContext is not present when rendering which
   means that links generated in the template should be made
   always including all parameters from ExtensionName over
   PluginName through the usual action etc.
2. The Controller from EXT:foo is not involved in any way,
   which means that any custom variables the particular
   template depends on must be added manually through
   the "variables" argument

Consider using Render/InlineViewHelper if you are rendering
templates from the same plugin.

Consider using Render/RequestViewHelper if you require a
completely isolated rendering identical to that which takes
place when rendering an Extbase plugin's content object.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="file" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to template file, EXT:myext/... paths supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="variables"
default="array ( )" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional array of template variables when rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional format of the template(s) being rendered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="paths" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional array (plugin.tx_myext.view style) of paths, EXT:mypath/... paths supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onError" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="graceful" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If forced to FALSE, errors are not caught but rather "transmitted" as every other error would be]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.template">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Render: Template

Render a template file (with arguments if desired).

Supports passing variables and controlling the format,
paths can be overridden and uses the same format as TS
settings a' la plugin.tx_myext.view, which means that
this can be done (from any extension, not just "foo")

    <v:render.template
            file="EXT:foo/Resources/Private/Templates/Action/Show.html"
     variables="{object: customLoadedObject}"
     paths="{v:variable.typoscript(path: 'plugin.tx_foo.view')}"
     format="xml" />

Which would render the "show" action's template from
EXT:foo using paths define in that extension's typoscript
but using a custom loaded object when rendering the template
rather than the object defined by the "Action" controller
of EXT:foo. The output would be in XML format and this
format would also be respected by Layouts and Partials
which are rendered from the Show.html template.

As such this is very similar to Render/RequestViewHelper
with two major differences:

1. A true ControllerContext is not present when rendering which
   means that links generated in the template should be made
   always including all parameters from ExtensionName over
   PluginName through the usual action etc.
2. The Controller from EXT:foo is not involved in any way,
   which means that any custom variables the particular
   template depends on must be added manually through
   the "variables" argument

Consider using Render/InlineViewHelper if you are rendering
templates from the same plugin.

Consider using Render/RequestViewHelper if you require a
completely isolated rendering identical to that which takes
place when rendering an Extbase plugin's content object.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="file" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to template file, EXT:myext/... paths supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="variables"
default="array ( )" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional array of template variables when rendering]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional format of the template(s) being rendered]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="paths" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional array (plugin.tx_myext.view style) of paths, EXT:mypath/... paths supported]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onError" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional error message to display if error occur while rendering. If NULL, lets the error Exception pass trough (and break rendering)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="graceful" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If forced to FALSE, errors are not caught but rather "transmitted" as every other error would be]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="render.uncache">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Uncaches partials. Use like ``f:render``.
The partial will then be rendered each time.
Please be aware that this will impact render time.
Arguments must be serializable and will be cached.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="partial" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Reference to a partial.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="section" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of section inside the partial to render.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="arguments" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Arguments to pass to the partial.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.collection">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Collection ViewHelper
This viewhelper returns a collection referenced by uid.
For more information look here:
http://docs.typo3.org/typo3cms/CoreApiReference/6.2/ApiOverview/Collections/Index.html#collections-api

### Example
{v:resource.collection(uid:'123') -> v:var.set(name: 'someCollection')}]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="identifier" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FAL combined identifiers (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="categories" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The sys_category records to select the resources from (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as resource uids.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.collection">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Collection ViewHelper
This viewhelper returns a collection referenced by uid.
For more information look here:
http://docs.typo3.org/typo3cms/CoreApiReference/6.2/ApiOverview/Collections/Index.html#collections-api

### Example
{v:resource.collection(uid:'123') -> v:var.set(name: 'someCollection')}]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="identifier" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FAL combined identifiers (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="categories" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The sys_category records to select the resources from (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as resource uids.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.collection">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Collection ViewHelper
This viewhelper returns a collection referenced by uid.
For more information look here:
http://docs.typo3.org/typo3cms/CoreApiReference/6.2/ApiOverview/Collections/Index.html#collections-api

### Example
{v:resource.collection(uid:'123') -> v:var.set(name: 'someCollection')}]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="identifier" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FAL combined identifiers (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="categories" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The sys_category records to select the resources from (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as resource uids.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.file">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to output or assign FAL sys_file records]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="identifier" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FAL combined identifiers (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="categories" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The sys_category records to select the resources from (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as resource uids.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.file">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to output or assign FAL sys_file records]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="identifier" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FAL combined identifiers (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="categories" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The sys_category records to select the resources from (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as resource uids.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.file">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to output or assign FAL sys_file records]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="identifier" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FAL combined identifiers (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="categories" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The sys_category records to select the resources from (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as resource uids.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to output or assign a image from FAL]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="identifier" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FAL combined identifiers (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="categories" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The sys_category records to select the resources from (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as resource uids.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE resource URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="minWidth" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="minHeight" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="maxWidth" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="maxHeight" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to output or assign a image from FAL]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="identifier" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FAL combined identifiers (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="categories" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The sys_category records to select the resources from (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as resource uids.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE resource URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="minWidth" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="minHeight" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="maxWidth" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="maxHeight" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to output or assign a image from FAL]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="identifier" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FAL combined identifiers (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="categories" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The sys_category records to select the resources from (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as resource uids.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE resource URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="minWidth" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="minHeight" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="maxWidth" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="maxHeight" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[ViewHelper to output or assign a image from FAL]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="identifier" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FAL combined identifiers (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="categories" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The sys_category records to select the resources from (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsUid"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as resource uids.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, the identifier argument is treated as reference uids and will be resolved to resources via sys_file_reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE resource URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="minWidth" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="minHeight" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="maxWidth" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum width of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="maxHeight" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum height of the image. Numeric value in pixels or simple calculations. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="usemap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[A hash-name reference to a map element with which to associate the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="ismap" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies that its img element provides access to a server-side image map.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="alt" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Equivalent content for those who cannot process images or who have image loading disabled.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.language">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Resource: Language

Reads a certain language file with returning not just one single label,
but all the translated labels.

### Examples

   <!-- Tag usage for force getting labels in a specific language (different to current is possible too) -->
   <v:resource.language extensionName="myext" path="Path/To/Locallang.xlf" languageKey="en"/>

   <!-- Tag usage for getting labels of current language -->
   <v:resource.language extensionName="myext" path="Path/To/Locallang.xlf"/>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="extensionName"
default="NULL" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of the extension]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="path"
default="'locallang.xlf'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Absolute or relative path to the locallang file]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="languageKey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Key for getting translation of a different than current initialized language]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.record">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.record">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.record.fal">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="resource.record.fal">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="table" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The table to lookup records.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="field" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The field of the table associated to resources.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="record" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The actual record. Alternatively you can use the "uid" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="uid" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the record. Alternatively you can use the "record" argument.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, a template variable with this name containing the requested data will be inserted instead of returning it.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="security.allow">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Security: Allow

Allows access to the child content based on given arguments.
The ViewHelper is a condition based ViewHelper which means it
supports the `f:then` and `f:else` child nodes - you can use
this behaviour to invert the access (i.e. use f:else in a check
if a frontend user is logged in, if you want to hide content
from authenticated users):

    <v:security.allow anyFrontendUser="TRUE">
        <f:then><!-- protected information displayed --></f:then>
        <f:else><!-- link to login form displayed --></f:else>
    </v:security.allow>

Is the mirror opposite of `v:security.deny`.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUser unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUserGroup"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUserGroup unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUser"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUser to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUsers"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUsers ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroup"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroup to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroups"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroups ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyBackendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any backend user unless other arguments disallows each specific backend user]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUser" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of a backend user to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUsers" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend users list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUserGroup"
default="NULL" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the backend user group to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUserGroups"
default="NULL" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend user groups list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="admin" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, a backend user which is also an admin is required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="evaluationType"
default="'AND'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specify AND or OR (case sensitive) to determine how arguments must be processed. Default is AND, requiring all arguments to be satisfied if used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="security.allow">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Security: Allow

Allows access to the child content based on given arguments.
The ViewHelper is a condition based ViewHelper which means it
supports the `f:then` and `f:else` child nodes - you can use
this behaviour to invert the access (i.e. use f:else in a check
if a frontend user is logged in, if you want to hide content
from authenticated users):

    <v:security.allow anyFrontendUser="TRUE">
        <f:then><!-- protected information displayed --></f:then>
        <f:else><!-- link to login form displayed --></f:else>
    </v:security.allow>

Is the mirror opposite of `v:security.deny`.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUser unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUserGroup"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUserGroup unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUser"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUser to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUsers"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUsers ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroup"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroup to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroups"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroups ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyBackendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any backend user unless other arguments disallows each specific backend user]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUser" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of a backend user to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUsers" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend users list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUserGroup"
default="NULL" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the backend user group to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUserGroups"
default="NULL" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend user groups list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="admin" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, a backend user which is also an admin is required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="evaluationType"
default="'AND'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specify AND or OR (case sensitive) to determine how arguments must be processed. Default is AND, requiring all arguments to be satisfied if used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="security.allow">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Security: Allow

Allows access to the child content based on given arguments.
The ViewHelper is a condition based ViewHelper which means it
supports the `f:then` and `f:else` child nodes - you can use
this behaviour to invert the access (i.e. use f:else in a check
if a frontend user is logged in, if you want to hide content
from authenticated users):

    <v:security.allow anyFrontendUser="TRUE">
        <f:then><!-- protected information displayed --></f:then>
        <f:else><!-- link to login form displayed --></f:else>
    </v:security.allow>

Is the mirror opposite of `v:security.deny`.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUser unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUserGroup"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUserGroup unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUser"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUser to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUsers"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUsers ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroup"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroup to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroups"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroups ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyBackendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any backend user unless other arguments disallows each specific backend user]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUser" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of a backend user to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUsers" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend users list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUserGroup"
default="NULL" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the backend user group to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUserGroups"
default="NULL" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend user groups list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="admin" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, a backend user which is also an admin is required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="evaluationType"
default="'AND'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specify AND or OR (case sensitive) to determine how arguments must be processed. Default is AND, requiring all arguments to be satisfied if used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="security.deny">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Security: Deny

Denies access to the child content based on given arguments.
The ViewHelper is a condition based ViewHelper which means it
supports the `f:then` and `f:else` child nodes.

Is the mirror opposite of `v:security.allow`.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUser unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUserGroup"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUserGroup unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUser"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUser to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUsers"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUsers ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroup"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroup to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroups"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroups ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyBackendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any backend user unless other arguments disallows each specific backend user]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUser" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of a backend user to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUsers" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend users list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUserGroup"
default="NULL" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the backend user group to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUserGroups"
default="NULL" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend user groups list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="admin" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, a backend user which is also an admin is required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="evaluationType"
default="'AND'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specify AND or OR (case sensitive) to determine how arguments must be processed. Default is AND, requiring all arguments to be satisfied if used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="security.deny">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Security: Deny

Denies access to the child content based on given arguments.
The ViewHelper is a condition based ViewHelper which means it
supports the `f:then` and `f:else` child nodes.

Is the mirror opposite of `v:security.allow`.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUser unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUserGroup"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUserGroup unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUser"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUser to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUsers"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUsers ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroup"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroup to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroups"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroups ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyBackendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any backend user unless other arguments disallows each specific backend user]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUser" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of a backend user to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUsers" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend users list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUserGroup"
default="NULL" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the backend user group to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUserGroups"
default="NULL" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend user groups list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="admin" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, a backend user which is also an admin is required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="evaluationType"
default="'AND'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specify AND or OR (case sensitive) to determine how arguments must be processed. Default is AND, requiring all arguments to be satisfied if used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="security.deny">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Security: Deny

Denies access to the child content based on given arguments.
The ViewHelper is a condition based ViewHelper which means it
supports the `f:then` and `f:else` child nodes.

Is the mirror opposite of `v:security.allow`.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUser unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyFrontendUserGroup"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any FrontendUserGroup unless other arguments disallows each specific FrontendUser]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUser"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUser to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUsers"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUser">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUsers ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroup"
default="NULL"
php:type="\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroup to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:anySimpleType" name="frontendUserGroups"
default="NULL"
php:type="&lt;\TYPO3\CMS\Extbase\Persistence\ObjectStorage&gt;\TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup">

<xsd:annotation>
<xsd:documentation>
<![CDATA[The FrontendUserGroups ObjectStorage to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="anyBackendUser"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, allows any backend user unless other arguments disallows each specific backend user]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUser" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of a backend user to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUsers" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend users list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="backendUserGroup"
default="NULL" php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The uid of the backend user group to allow/deny]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="backendUserGroups"
default="NULL" php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The backend user groups list to allow/deny. If string, CSV of uids is assumed, if array, array of uids is assumed]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="admin" default="NULL"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If TRUE, a backend user which is also an admin is required]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="evaluationType"
default="'AND'" php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specify AND or OR (case sensitive) to determine how arguments must be processed. Default is AND, requiring all arguments to be satisfied if used]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="site.name">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Site: Name

Returns the site name as specified in TYPO3_CONF_VARS.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="site.url">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Site: URL

Returns the website URL as returned by
\TYPO3\CMS\Core\Utility\GeneralUtility::getIndpEnv('TYPO3_SITE_URL')]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="switch">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Switch ViewHelper

Fluid implementation of PHP's switch($value) construct.

### Example

    <v:switch value="{variable}">
        <v:case case="someValue" break="TRUE">
            <!-- do whatever, if {variable} == 'someValue' -->
        </v:case>
        <v:case case="default">
            <!-- the case "default" is a reserved keyword which acts as the default case. -->
        </v:case>
    </v:switch>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="value" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Variable on which to switch - string, integer or number]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="as" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If specified, inserts the matched case tag content as variable using name from "as"]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="system.dateTime">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### System: DateTime

Returns the current system UNIX timestamp as DateTime.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="system.timestamp">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### System: UNIX Timestamp

Returns the current system UNIX timestamp as integer.
Useful combined with the Math group of ViewHelpers:

    <!-- adds exactly one hour to a DateTime and formats it -->
    <f:format.date format="H:i">{dateTime.timestamp -> v:math.sum(b: 3600)}</f:format.date>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="system.uniqId">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### System: Unique ID

Returns a unique ID based on PHP's uniqid-function.

Comes in useful when handling/generating html-element-IDs
for usage with JavaScript.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="prefix" default="''"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[An optional prefix for making sure it's unique across environments]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="moreEntropy"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Add some pseudo random strings. Refer to uniqid()'s Reference.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="tag">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Tag building ViewHelper

Creates one HTML tag of any type, with various properties
like class and ID applied only if arguments are not empty,
rather than apply them always - empty or not - if provided.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideIfEmpty"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Hide the tag completely if there is no tag content]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="tag">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Tag building ViewHelper

Creates one HTML tag of any type, with various properties
like class and ID applied only if arguments are not empty,
rather than apply them always - empty or not - if provided.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="class" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[CSS class(es) for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="dir" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Text direction for this HTML element. Allowed strings: "ltr" (left to right), "rtl" (right to left)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="id" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Unique (in this file) identifier for this HTML element.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="lang" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Language for this element. Use short names specified in RFC 1766]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="style" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Individual CSS styles for this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="title" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tooltip text of element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="accesskey" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Keyboard shortcut to access this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="tabindex" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Specifies the tab order of this element]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="onclick" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[JavaScript evaluated for the onclick event]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Tag name]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="hideIfEmpty"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Hide the tag completely if there is no tag content]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="try">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Try ViewHelper

Attempts to render child content. If an Exception is encountered
while rendering, instead the `f:else` child node is rendered,
if it is present. If `f:else` is not used, no output is returned.

Can be used to perform complex translations of Exception messages
which can occur. Can naturally also be used to provide a great
deal of additional information about every possible Exception-type
error which Fluid can encounter (and there are many).

Note that this is a Condition ViewHelper which means you can use
the `f:then` child node but it differs from regular Conditions by
also allowing the template developer to skip the `f:then` child
node and use the direct tag content as the "TRUE" condition and
add an `f:else` which is only rendered in case of an Exception
during rendering.

Also note that you can use the `then` and `else` attributes; the
`then` attribute is what is attempted rendered and the `else`
attribute is what is rendered if retrieving the `then` attribute's
value fails. Which clearly only makes sense if for example complex
inline ViewHelpers are used in the attributes.

### Example usage

#### Please note that this is a theoretical example!

The example is theoretical in one major aspect: v:format.json.decode
throws an Exception which Fluid displays as a string always - abstract
from this and imagine that a plain Exception happens on errors.

    <v:try>
        <!-- assume that the variable {badJson} contains the string "DontDecodeMe"
             which if course is invalid JSON and cannot be decoded. The default
             behavior is to simply output a simple "cannot decode" string. -->
        <v:variable.set name="decodedBadJson" value="{badJson -> v:format.json.decode()}" />
        Displayed only if the JSON decode worked. Much more code and many more
        ViewHelpers can go here. Now, imagine that this block spans so much code
        that potentially there could come an Exception from many additional places
        (for example from Widgets) and you cannot be sure where the Exception comes
        from but still want to tell the user what exactly went wrong and provide
        an error code which makes sense to send to developers if problems persist:
        <f:else>
            <h4>
                Error in "{exception.trace.0.class
                    -> v:iterator.explode(glue: '_')
                    -> v:iterator.pop()
                    -> v:format.replace(substring: 'ViewHelper', replacement: ''}"
                       <small>{exception.code}</small>
                <!-- Output example: "Error in Decode <small>1358440054</small>" -->
            </h4>
            <p>
                {exception.message}
                <!-- Output example: "The provided argument is invalid JSON" -->
            </p>
            <pre>
                Value: ``{exception.trace.0.args.0}
                <!-- Output example: "Value: ``DontDecodeMe" which is quite nice
                     for developers to know as part of a bug report from users. -->
            </pre>
        </f:else>
    </v:try>
    ...or if you want a shorter version...
    <!-- Tries to encode an object, if it fails, falls back by returning a proper JSON
         value, thus preventing breakage by the JSON consumer whatever it may be. -->
    {v:try(then: '{badObject -> v:format.json.encode()}', else: '{"validJson": "validValue"')}
    <!-- Note: be VERY careful about the inline JSON syntax! It's very close to Fluids. Always
         double quote your object variables' names, that prevents almost all issues! -->]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="try">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Try ViewHelper

Attempts to render child content. If an Exception is encountered
while rendering, instead the `f:else` child node is rendered,
if it is present. If `f:else` is not used, no output is returned.

Can be used to perform complex translations of Exception messages
which can occur. Can naturally also be used to provide a great
deal of additional information about every possible Exception-type
error which Fluid can encounter (and there are many).

Note that this is a Condition ViewHelper which means you can use
the `f:then` child node but it differs from regular Conditions by
also allowing the template developer to skip the `f:then` child
node and use the direct tag content as the "TRUE" condition and
add an `f:else` which is only rendered in case of an Exception
during rendering.

Also note that you can use the `then` and `else` attributes; the
`then` attribute is what is attempted rendered and the `else`
attribute is what is rendered if retrieving the `then` attribute's
value fails. Which clearly only makes sense if for example complex
inline ViewHelpers are used in the attributes.

### Example usage

#### Please note that this is a theoretical example!

The example is theoretical in one major aspect: v:format.json.decode
throws an Exception which Fluid displays as a string always - abstract
from this and imagine that a plain Exception happens on errors.

    <v:try>
        <!-- assume that the variable {badJson} contains the string "DontDecodeMe"
             which if course is invalid JSON and cannot be decoded. The default
             behavior is to simply output a simple "cannot decode" string. -->
        <v:variable.set name="decodedBadJson" value="{badJson -> v:format.json.decode()}" />
        Displayed only if the JSON decode worked. Much more code and many more
        ViewHelpers can go here. Now, imagine that this block spans so much code
        that potentially there could come an Exception from many additional places
        (for example from Widgets) and you cannot be sure where the Exception comes
        from but still want to tell the user what exactly went wrong and provide
        an error code which makes sense to send to developers if problems persist:
        <f:else>
            <h4>
                Error in "{exception.trace.0.class
                    -> v:iterator.explode(glue: '_')
                    -> v:iterator.pop()
                    -> v:format.replace(substring: 'ViewHelper', replacement: ''}"
                       <small>{exception.code}</small>
                <!-- Output example: "Error in Decode <small>1358440054</small>" -->
            </h4>
            <p>
                {exception.message}
                <!-- Output example: "The provided argument is invalid JSON" -->
            </p>
            <pre>
                Value: ``{exception.trace.0.args.0}
                <!-- Output example: "Value: ``DontDecodeMe" which is quite nice
                     for developers to know as part of a bug report from users. -->
            </pre>
        </f:else>
    </v:try>
    ...or if you want a shorter version...
    <!-- Tries to encode an object, if it fails, falls back by returning a proper JSON
         value, thus preventing breakage by the JSON consumer whatever it may be. -->
    {v:try(then: '{badObject -> v:format.json.encode()}', else: '{"validJson": "validValue"')}
    <!-- Note: be VERY careful about the inline JSON syntax! It's very close to Fluids. Always
         double quote your object variables' names, that prevents almost all issues! -->]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="then" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="else" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to be returned if the condition if not met.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="uri.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Uri: Image

Returns the relative or absolute URI for the image resource
or it's derivate if differing dimesions are provided.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="uri.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Uri: Image

Returns the relative or absolute URI for the image resource
or it's derivate if differing dimesions are provided.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="uri.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Uri: Image

Returns the relative or absolute URI for the image resource
or it's derivate if differing dimesions are provided.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="uri.image">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Uri: Image

Returns the relative or absolute URI for the image resource
or it's derivate if differing dimesions are provided.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="additionalAttributes"
default="NULL" php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional tag attributes. They will be added directly to the resulting HTML tag.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:array" name="data" default="NULL"
php:type="array">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Additional data-* attributes. They will each be added with a "data-" prefix.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="src" default="NULL"
php:type="mixed" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Path to the media resource(s). Can contain single or multiple paths for videos/audio (either CSV, array or implementing Traversable).]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="relative" default="true"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[If FALSE media URIs are rendered absolute. URIs in backend mode are always absolute.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="width" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Width of the image. This can be a numeric value representing the fixed width of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="height" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Height of the image. This can be a numeric value representing the fixed height of the image in pixels. But you can also perform simple calculations by adding "m" or "c" to the value. See imgResource.width for possible options.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Width of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="maxH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Maximum Height of the image. (no upscaling)]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minW" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Width of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="minH" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Minimum Height of the image.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="format" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Format of the processed file - also determines the target file format. If blank, TYPO3/IM/GM default is taken into account.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:integer" name="quality" default="NULL"
php:type="integer">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Quality of the processed image. If blank/not present falls back to the default quality defined in install tool.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="treatIdAsReference"
default="false" php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[When TRUE treat given src argument as sys_file_reference record. Applies only to TYPO3 6.x and above.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="uri.request">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Uri: Request

Returns the Uri of the requested page (site_url + all the GET params)
\TYPO3\CMS\Core\Utility\GeneralUtility::getIndpEnv('TYPO3_REQUEST_URL')]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="uri.typolink">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### TypolinkViewhelper

Renders a uri with the TypoLink function.
Can be used with the LinkWizard

For more info on the typolink function, please consult the offical core-documentation:
http://docs.typo3.org/typo3cms/TyposcriptIn45MinutesTutorial/TypoScriptFunctions/Typolink/Index.html

### Examples

    <!-- tag -->
    <v:uri.typolink configuration="{typoLinkConfiguration}" />
    <v:uri.typolink configuration="{object}">My LinkText</v:uri.typolink>
    <!-- with a {parameter} variable containing the PID -->
    <v:uri.typolink configuration="{parameter: parameter}" />
    <!-- with a {fields.link} variable from the LinkWizard (incl. 'class', 'target' etc.) inside a flux form -->
    <v:uri.typolink configuration="{parameter: fields.link}" />
    <!-- same with a {page} variable from fluidpages -->
    <v:uri.typolink configuration="{parameter: page.uid}" />
    <!-- With extensive configuration -->
    <v:uri.typolink configuration="{parameter: page.uid, additionalParams: '&print=1', title: 'Follow the link'}">Click Me!</v:uri.typolink>]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:array" name="configuration" default="NULL"
php:type="array" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[The typoLink configuration]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="variable.convert">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Convert ViewHelper

Converts $value to $type which can be one of 'string', 'integer',
'float', 'boolean', 'array' or 'ObjectStorage'. If $value is NULL
sensible defaults are assigned or $default which obviously has to
be of $type as well.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to convert into a different type]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="type" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Data type to convert the value into. Can be one of "string", "integer", "float", "boolean", "array" or "ObjectStorage".]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="default" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Optional default value to assign to the converted variable in case it is NULL.]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="variable.get">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Variable: Get

ViewHelper used to read the value of a current template
variable. Can be used with dynamic indices in arrays:

    <v:variable.get name="array.{dynamicIndex}" />
    <v:variable.get name="array.{v:variable.get(name: 'arrayOfSelectedKeys.{indexInArray}')}" />
    <f:for each="{v:variable.get(name: 'object.arrayProperty.{dynamicIndex}')}" as="nestedObject">
        ...
    </f:for>

Or to read names of variables which contain dynamic parts:

    <!-- if {variableName} is "Name", outputs value of {dynamicName} -->
    {v:variable.get(name: 'dynamic{variableName}')}

If your target object is an array with unsequential yet
numeric indices (e.g. {123: 'value1', 513: 'value2'},
commonly seen in reindexed UID map arrays) use
`useRawIndex="TRUE"` to indicate you do not want your
array/QueryResult/Iterator to be accessed by locating
the Nth element - which is the default behavior.

```warning
Do not try `useRawKeys="TRUE"` on QueryResult or
ObjectStorage unless you are fully aware what you are
doing. These particular types require an unpredictable
index value - the SPL object hash value - when accessing
members directly. This SPL indexing and the very common
occurrences of QueryResult and ObjectStorage variables
in templates is the very reason why `useRawKeys` by
default is set to `FALSE`.
```]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:boolean" name="useRawKeys" default="false"
php:type="boolean">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="variable.register.get">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Variable\Register: Get

ViewHelper used to read the value of a TSFE-register
Can be used to read names of variables which contain dynamic parts:

    <!-- if {variableName} is "Name", outputs value of {dynamicName} -->
    {v:variable.register.get(name: 'dynamic{variableName}')}]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of register]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="variable.register.set">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Variable\Register: Set

Sets a single register in the TSFE-register.

Using as `{value -> v:variable.register.set(name: 'myVar')}` makes $GLOBALS["TSFE"]->register['myVar']
contain `{value}`.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Value to set]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[Name of register]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="variable.set">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Variable: Set

Sets a single variable in the TemplateVariableContainer
scope. The variable then becomes accessible as {var}.

Combines well with `v:variable.get` to set shorter variable
names referencing dynamic variables, such as:

    <v:variable.set name="myObject" value="{v:variable.get(name: 'arrayVariable.{offset}')}" />
    <!-- If {index} == 4 then {myObject} is now == {arrayVariable.4} -->
    {myObject.name} <!-- corresponds to {arrayVariable.4.name} -->

Note that `{arrayVariable.{offset}.name}` is not possible
due to the way Fluid parses nodes; the above piece of
code would try reading `arrayVariable.{offset}.name`
as a variable actually called "arrayVariable.{offset}.name"
rather than the correct `arrayVariable[offset][name]`.

In many ways this ViewHelper works like `f:alias`
with one exception: in `f:alias` the variable only
becomes accessible in the tag content, whereas `v:variable.set`
inserts the variable in the template and leaves it there
(it "leaks" the variable).

If $name contains a dot, VHS will attempt to load the object
stored under the named used as the first segment part and
set the value at the remaining path. E.g.
`{value -> v:variable.set(name: 'object.property.subProperty')}`
would attempt to load `{object}` first, then set
`property.subProperty` on that object/array using
ObjectAccess::setPropertyPath(). If `{object}` is not
an object or an array, the variable will not be set. Please
note: Extbase does not currently support setting variables
deeper than two levels, meaning a `name` of fx `foo.bar.baz`
will be ignored. To set values deeper than two levels you
must first extract the second-level object then set the
value on that object.

Using as `{value -> v:variable.set(name: 'myVar')}` makes `{myVar}` contain
`{value}`.]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute type="xsd:mixed" name="value" default="NULL"
php:type="mixed">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="variable.typoscript">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Variable: TypoScript

Accesses Typoscript paths. Contrary to the Fluid-native
`f:cObject` this ViewHelper does not render objects but
rather retrieves the values. For example, if you retrieve
a TypoScript path to a TMENU object you will receive the
array of TypoScript defining the menu - not the rendered
menu HTML.

A great example of how to use this ViewHelper is to very
quickly migrate a TypoScript-menu-based site (for example
currently running TemplaVoila + TMENU-objects) to a Fluid
ViewHelper menu based on `v:page.menu` or `v:page.breadCrumb`
by accessing key configuration options such as `entryLevel`
and even various `wrap` definitions.

A quick example of how to parse a `wrap` TypoScript setting
into two variables usable for a menu item:

    <!-- This piece to be added as far up as possible in order to prevent multiple executions -->
    <v:variable.set name="menuSettings" value="{v:variable.typoscript(path: 'lib.menu.main.stdWrap')}" />
    <v:variable.set name="wrap" value="{menuSettings.wrap -> v:iterator.explode(glue: '|')}" />

    <!-- This in the loop which renders the menu (see "VHS: manual menu rendering" in FAQ): -->
    {wrap.0}{menuItem.title}{wrap.1}

    <!-- An additional example to demonstrate very compact conditions which prevent wraps from being displayed -->
    {wrap.0 -> f:if(condition: settings.wrapBefore)}{menuItem.title}{wrap.1 -> f:if(condition: settings.wrapAfter)}]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="path" default="NULL"
php:type="string">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
<xsd:element name="variable.unset">
<xsd:annotation>
<xsd:documentation>
<![CDATA[### Variable: Unset

Quite simply, removes a currently available variable
from the TemplateVariableContainer:

    <!-- Data: {person: {name: 'Elvis', nick: 'King'}} -->
    I'm {person.name}. Call me "{person.nick}". A ding-dang doo!
    <v:variable.unset name="person" />
    <f:if condition="{person}">
        <f:else>
            You saw this coming...
            <em>Elvis has left the building</em>
        </f:else>
    </f:if>

At the time of writing this, `v:variable.unset` is not able
to remove members of for example arrays:

    <!-- DOES NOT WORK! -->
    <v:variable.unset name="myObject.propertyName" />]]>
</xsd:documentation>
</xsd:annotation>
<xsd:complexType mixed="true">
<xsd:sequence>
<xsd:any minOccurs="0" maxOccurs="1" />
</xsd:sequence>
<xsd:attribute type="xsd:string" name="name" default="NULL"
php:type="string" use="required">
<xsd:annotation>
<xsd:documentation>
<![CDATA[]]>
</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:complexType>
</xsd:element>
</xsd:schema>